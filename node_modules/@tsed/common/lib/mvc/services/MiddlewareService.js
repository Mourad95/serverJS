"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const Provider_1 = require("../../di/class/Provider");
const service_1 = require("../../di/decorators/service");
const ProviderType_1 = require("../../di/interfaces/ProviderType");
const ProviderRegistry_1 = require("../../di/registries/ProviderRegistry");
const InjectorService_1 = require("../../di/services/InjectorService");
const UnknowMiddlewareError_1 = require("../errors/UnknowMiddlewareError");
/**
 * @deprecated This service will be removed in a future release. Use injectorService directly.
 */
let MiddlewareService = class MiddlewareService extends core_1.ProxyMap {
    constructor(injectorService) {
        super(injectorService, { filter: { type: ProviderType_1.ProviderType.MIDDLEWARE } });
        this.injectorService = injectorService;
    }
    /**
     *
     * @param target
     * @returns {Provider}
     * @deprecated
     */
    /* istanbul ignore next */
    static get(target) {
        return ProviderRegistry_1.ProviderRegistry.get(target);
    }
    /**
     *
     * @param target
     * @param provider
     */
    /* istanbul ignore next */
    static set(target, provider) {
        ProviderRegistry_1.ProviderRegistry.set(target, provider);
        return this;
    }
    /**
     *
     * @param target
     * @deprecated
     */
    /* istanbul ignore next */
    static has(target) {
        return ProviderRegistry_1.ProviderRegistry.has(target);
    }
    /**
     *
     * @param target
     * @param locals
     * @param designParamTypes
     * @returns {T}
     */
    /* istanbul ignore next */
    invoke(target, locals = new Map(), designParamTypes) {
        return this.injectorService.invoke(target, locals, designParamTypes);
    }
    /**
     *
     * @param target
     * @param args
     * @returns {any}
     */
    /* istanbul ignore next */
    invokeMethod(target, ...args) {
        const instance = this.injectorService.get(target);
        if (!instance || !instance.use) {
            throw new UnknowMiddlewareError_1.UnknowMiddlewareError(target);
        }
        return instance.use(...args);
    }
};
tslib_1.__decorate([
    core_1.Deprecated("MiddlewareService.invoke(). Removed feature. Use injectorService.invoke instead of.")
    /* istanbul ignore next */
    ,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [core_1.Type, Map, Array]),
    tslib_1.__metadata("design:returntype", Object)
], MiddlewareService.prototype, "invoke", null);
tslib_1.__decorate([
    core_1.Deprecated("MiddlewareService.invokeMethod(). removed feature")
    /* istanbul ignore next */
    ,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [core_1.Type, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], MiddlewareService.prototype, "invokeMethod", null);
tslib_1.__decorate([
    core_1.Deprecated("static MiddlewareService.get(). Removed feature.")
    /* istanbul ignore next */
    ,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [core_1.Type]),
    tslib_1.__metadata("design:returntype", Object)
], MiddlewareService, "get", null);
tslib_1.__decorate([
    core_1.Deprecated("static MiddlewareService.set(). Removed feature.")
    /* istanbul ignore next */
    ,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [core_1.Type, Provider_1.Provider]),
    tslib_1.__metadata("design:returntype", void 0)
], MiddlewareService, "set", null);
tslib_1.__decorate([
    core_1.Deprecated("static MiddlewareService.has(). Removed feature.")
    /* istanbul ignore next */
    ,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [core_1.Type]),
    tslib_1.__metadata("design:returntype", Boolean)
], MiddlewareService, "has", null);
MiddlewareService = tslib_1.__decorate([
    service_1.Service(),
    tslib_1.__metadata("design:paramtypes", [InjectorService_1.InjectorService])
], MiddlewareService);
exports.MiddlewareService = MiddlewareService;

//# sourceMappingURL=MiddlewareService.js.map
