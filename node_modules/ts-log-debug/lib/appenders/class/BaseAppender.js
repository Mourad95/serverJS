"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Layouts_1 = require("../../layouts/class/Layouts");
/**
 * ## BaseAppender
 *
 * ts-log-debug can load appenders from outside the core appenders. The type config value is used as a require path if no matching appender can be found. For example, the following configuration will create an appender with decorators:
 *
 * ```typescript
 * // consoleAppender.ts
 * import {Appender, BaseAppender, LogEvent} from "ts-log-debug";
 * const consoleLog = console.log.bind(console);
 *
 * @ Appender({name: "console2"})
 * export class ConsoleAppender extends BaseAppender {
 *   write(loggingEvent: LogEvent) {
 *       consoleLog(this.layout(loggingEvent, this.config.timezoneOffset));
 *   }
 * }
 * ```
 *
 * This appender can be use like this:
 *
 * ```typescript
 * import {Logger} from "ts-log-debug";
 * import "./consoleAppender.ts"
 *
 * const logger = new Logger("loggerName");
 *
 * logger.appenders
 *   .set("console-log", {
 *       type: "console2", level: ["debug", "info", "trace"]
 *   });
 * ```
 *
 *
 */
var BaseAppender = /** @class */ (function () {
    function BaseAppender(_config) {
        this._config = _config;
        this.appenderOptions = { name: "" };
        this.configure(_config);
        if (this["build"]) {
            this["build"]();
        }
    }
    Object.defineProperty(BaseAppender.prototype, "config", {
        get: function () {
            return this._config;
        },
        enumerable: true,
        configurable: true
    });
    BaseAppender.prototype.configure = function (config) {
        Object.assign(this._config, config);
        this._layout = Layouts_1.Layouts.get(this.appenderOptions.defaultLayout || "colored", this._config);
        if (this._config.layout) {
            this._layout = Layouts_1.Layouts.get(this._config.layout.type, this._config.layout);
        }
        return this;
    };
    /**
     *
     * @param args
     */
    BaseAppender.prototype.layout = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (_a = this._layout).transform.apply(_a, args);
        var _a;
    };
    return BaseAppender;
}());
exports.BaseAppender = BaseAppender;
//# sourceMappingURL=BaseAppender.js.map