{"version":3,"sources":["../src/core/utils/DecoratorUtils.ts"],"names":[],"mappings":";;AACA,+CAA6D;AAE7D;;;;;GAKG;AACH,0BACE,IAAW,EACX,QAAQ,GAAG,KAAK;IAEhB,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC;IAE/C,MAAM,UAAU,GAAG,CAAC,IAAY,EAAO,EAAE;QACvC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QAED,OAAO,MAAM,KAAK,sBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAE,CAAC,IAAI,GAAG,SAAS,CAAS,CAAC;IAC1E,CAAC,CAAC;IAEF,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QAClC,OAAO,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,WAAW,CAAC;KACjG;IAED,IAAI,CAAC,WAAW,IAAI,UAAU,KAAK,SAAS,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;QACnG,OAAO,UAAU,CAAC,UAAU,CAAC,CAAC;KAC/B;IAED,OAAO,UAAU,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;AACzE,CAAC;AAvBD,4CAuBC;AAED;;GAEG;AACH,8BAAsC,SAAQ,KAAK;IAGjD,YAAY,SAAc,EAAE,IAAW;QACrC,KAAK,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;IAChE,CAAC;IAEO,MAAM,CAAC,YAAY,CAAC,SAAc,EAAE,IAAW;QACrD,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;QAE1C,MAAM,WAAW,GAAG,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACjD,MAAM,YAAY,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,KAAK,GAAG,YAAY,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QACrE,MAAM,IAAI,GAAG,YAAY,KAAK,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;QAChE,MAAM,MAAM,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;QAEtD,MAAM,IAAI,GAAG,oBAAM,CAAC,sBAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,GAAG,KAAK,CAAC;QAEvD,OAAO,GAAG,SAAS,CAAC,IAAI,mBAAmB,WAAW,OAAO,IAAI,EAAE,CAAC;IACtE,CAAC;CACF;AApBD,4DAoBC;AAED;;;;;GAKG;AACH,uBAA8B,MAAW,EAAE,WAAmB;IAC5D,OAAO,CAAC,MAAM,EAAE,WAAW,EAAE,0BAAY,CAAC,MAAM,EAAE,WAAW,CAAE,CAAC,CAAC;AACnE,CAAC;AAFD,sCAEC","file":"DecoratorUtils.js","sourcesContent":["import {DecoratorParameters} from \"../interfaces\";\nimport {descriptorOf, getClass, nameOf} from \"./ObjectUtils\";\n\n/**\n *\n * @param {any[]} args\n * @param longType\n * @returns {\"parameter\" | \"property\" | \"property.static\" | \"method\" | \"method.static\" | \"class\"}\n */\nexport function getDecoratorType(\n  args: any[],\n  longType = false\n): \"parameter\" | \"parameter.constructor\" | \"parameter.static\" | \"property\" | \"property.static\" | \"method\" | \"method.static\" | \"class\" {\n  const [target, propertyKey, descriptor] = args;\n\n  const staticType = (type: string): any => {\n    if (!longType) {\n      return type;\n    }\n\n    return target !== getClass(target) ? type : ((type + \".static\") as any);\n  };\n\n  if (typeof descriptor === \"number\") {\n    return propertyKey ? staticType(\"parameter\") : longType ? \"parameter.constructor\" : \"parameter\";\n  }\n\n  if ((propertyKey && descriptor === undefined) || (descriptor && (descriptor.get || descriptor.set))) {\n    return staticType(\"property\");\n  }\n\n  return descriptor && descriptor.value ? staticType(\"method\") : \"class\";\n}\n\n/**\n *\n */\nexport class UnsupportedDecoratorType extends Error {\n  name: \"UNSUPPORTED_DECORATOR_TYPE\";\n\n  constructor(decorator: any, args: any[]) {\n    super(UnsupportedDecoratorType.buildMessage(decorator, args));\n  }\n\n  private static buildMessage(decorator: any, args: any[]): string {\n    const [target, propertyKey, index] = args;\n\n    const bindingType = getDecoratorType(args, true);\n    const shortBinding = bindingType.split(\"/\")[0];\n    const param = shortBinding === \"parameter\" ? \".[\" + index + \"]\" : \"\";\n    const cstr = shortBinding === \"parameter\" ? \".constructor\" : \"\";\n    const method = propertyKey ? \".\" + propertyKey : cstr;\n\n    const path = nameOf(getClass(target)) + method + param;\n\n    return `${decorator.name} cannot used as ${bindingType} at ${path}`;\n  }\n}\n\n/**\n *\n * @param target\n * @param {string} propertyKey\n * @returns {DecoratorParameters}\n */\nexport function decoratorArgs(target: any, propertyKey: string): DecoratorParameters {\n  return [target, propertyKey, descriptorOf(target, propertyKey)!];\n}\n"],"sourceRoot":"../../"}