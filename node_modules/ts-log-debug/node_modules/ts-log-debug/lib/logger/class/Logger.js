"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module logger
 */
/** */
var LoggerAppenders_1 = require("./LoggerAppenders");
var tableUtils_1 = require("../utils/tableUtils");
var LogEvent_1 = require("../../core/LogEvent");
var LogLevel_1 = require("../../core/LogLevel");
var util = require("util");
var Logger = /** @class */ (function () {
    /**
     *
     */
    function Logger(_name) {
        if (_name === void 0) { _name = "default"; }
        this._name = _name;
        this._appenders = new LoggerAppenders_1.LoggerAppenders();
        /**
         *
         */
        this._context = new Map();
        this.level = "all";
    }
    Object.defineProperty(Logger.prototype, "appenders", {
        get: function () {
            return this._appenders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "level", {
        get: function () {
            return this._level.toString();
        },
        set: function (level) {
            this._level = LogLevel_1.LogLevel.getLevel(level, "debug");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "context", {
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    Logger.prototype.isLevelEnabled = function (otherLevel) {
        return this._level.isLessThanOrEqualTo(otherLevel);
    };
    /**
     * Prints to stdout with newline. Multiple arguments can be passed, with the first used as the primary message and all additional used as substitution values similar to printf() (the arguments are all passed to util.format()).
     * @param data
     * @returns {any}
     */
    Logger.prototype.debug = function () {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        return this.write(LogLevel_1.levels().DEBUG, data);
    };
    /**
     *
     * @param data
     * @returns {any}
     */
    Logger.prototype.info = function () {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        return this.write(LogLevel_1.levels().INFO, data);
    };
    /**
     *
     * @param data
     * @returns {any}
     */
    Logger.prototype.warn = function () {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        return this.write(LogLevel_1.levels().WARN, data);
    };
    /**
     * Prints to stderr with newline. Multiple arguments can be passed, with the first used as the primary
     * message and all additional used as substitution values similar to printf() (the arguments are all
     * passed to util.format()).
     * @param data
     * @param args
     * @returns {any}
     */
    Logger.prototype.error = function () {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        return this.write(LogLevel_1.levels().ERROR, data);
    };
    Logger.prototype.fatal = function () {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        return this.write(LogLevel_1.levels().FATAL, data);
    };
    /**
     *
     * @param data
     * @returns {Logger}
     */
    Logger.prototype.trace = function () {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        var stack = "\n" + Logger.createStack() + "\n";
        data.push(stack);
        return this.write(LogLevel_1.levels().TRACE, data);
    };
    /**
     *
     */
    Logger.prototype.start = function () {
        this.level = "ALL";
        return this;
    };
    /**
     *
     */
    Logger.prototype.stop = function () {
        this.level = "OFF";
        return this;
    };
    /**
     *
     * @returns {Promise<TAll[]>}
     */
    Logger.prototype.shutdown = function () {
        this.stop();
        var promises = this.appenders
            .toArray()
            .filter(function (appender) { return !!appender.instance.shutdown; })
            .map(function (appender) { return appender.instance.shutdown(); });
        return Promise.all(promises);
    };
    /**
     *
     * @returns {Logger}
     */
    Logger.prototype.write = function (logLevel, data) {
        if (!this.isLevelEnabled(logLevel))
            return this;
        var logEvent = new LogEvent_1.LogEvent(this._name, logLevel, data, this._context);
        this.appenders
            .byLogLevel(logLevel)
            .forEach(function (appender) {
            appender.write(logEvent);
        });
        return this;
    };
    /**
     * Create stack trace  the lines of least Logger.
     * @returns {string}
     */
    Logger.createStack = function () {
        var stack = new Error().stack.replace("Error\n", "");
        var array = stack.split("\n");
        /* istanbul ignore else */
        if (array[0].indexOf("Logger.") > -1) {
            array.splice(0, 1);
        }
        /* istanbul ignore else */
        if (array[0].indexOf("Logger.") > -1) {
            array.splice(0, 1);
        }
        return array.join("\n");
    };
    /**
     *
     * @param list
     * @param settings
     */
    Logger.prototype.drawTable = function (list, settings) {
        if (settings === void 0) { settings = {}; }
        return tableUtils_1.drawTable(list, settings);
    };
    /**
     *
     * @param list
     * @param settings
     * @returns {Logger}
     */
    Logger.prototype.printTable = function (list, settings) {
        if (settings === void 0) { settings = {}; }
        this.info("\n" + this.drawTable(list, settings));
        return this;
    };
    return Logger;
}());
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map