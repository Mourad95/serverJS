"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ProviderType_1 = require("../../di/interfaces/ProviderType");
const ProviderRegistry_1 = require("../../di/registries/ProviderRegistry");
const ControllerProvider_1 = require("../class/ControllerProvider");
const ExpressRouter_1 = require("../services/ExpressRouter");
const RouterController_1 = require("../services/RouterController");
// tslint:disable-next-line: variable-name
exports.ControllerRegistry = ProviderRegistry_1.GlobalProviders.createRegistry(ProviderType_1.ProviderType.CONTROLLER, ControllerProvider_1.ControllerProvider, {
    injectable: false,
    buildable: true,
    onInvoke(provider, locals, designParamTypes) {
        if (!locals.has(ExpressRouter_1.ExpressRouter)) {
            locals.set(RouterController_1.RouterController, new RouterController_1.RouterController(provider.router));
            locals.set(ExpressRouter_1.ExpressRouter, provider.router);
        }
    }
});
/**
 * Add a new controller in the `ProviderRegistry`. This controller will be built when `InjectorService` will be loaded.
 *
 * #### Example
 *
 * ```typescript
 * import {registerController, InjectorService} from "@tsed/common";
 *
 * export default class MyController {
 *     constructor(){}
 *     transform() {
 *         return "test";
 *     }
 * }
 *
 * registerController({provide: MyController});
 * // or
 * registerController(MyController);
 *
 * const injector = new InjectorService();
 * injector.load();
 *
 * const myController = injector.get<MyController>(MyController);
 * myController.getFoo(); // test
 * ```
 *
 * @param provider Provider configuration.
 */
exports.registerController = ProviderRegistry_1.GlobalProviders.createRegisterFn(ProviderType_1.ProviderType.FILTER);

//# sourceMappingURL=ControllerRegistry.js.map
