{"version":3,"sources":["../src/swagger/utils/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import {JsonSchema, PathParamsType} from \"@tsed/common\";\nimport {deepExtends} from \"@tsed/core\";\n\n/** */\n\nexport function parseSwaggerPath(base: string, path: PathParamsType = \"\"): {path: string; pathParams: any[]}[] {\n  if (path instanceof RegExp) {\n    path = path\n      .toString()\n      .replace(/^\\//, \"\")\n      .replace(/\\/$/, \"\")\n      .replace(/\\\\/, \"\");\n  }\n\n  const params: any[] = [];\n  const paths: any[] = [];\n  let isOptional = false;\n  let current = \"\";\n\n  (\"\" + base + path)\n    .split(\"/\")\n    .filter(o => !!o)\n    .map(key => {\n      const name = key.replace(\":\", \"\").replace(\"?\", \"\");\n\n      if (key.indexOf(\":\") > -1) {\n        const optional = key.indexOf(\"?\") > -1;\n\n        // Append previous config\n        if (optional && !isOptional) {\n          isOptional = true;\n\n          paths.push({\n            path: current,\n            pathParams: [].concat(params as any)\n          });\n        }\n\n        current += \"/{\" + name + \"}\";\n\n        params.push({\n          in: \"path\",\n          name,\n          type: \"string\",\n          required: true\n        });\n\n        if (optional && isOptional) {\n          paths.push({\n            path: current,\n            pathParams: [].concat(params as any)\n          });\n        }\n      } else {\n        current += \"/\" + key;\n      }\n    });\n\n  return paths.length\n    ? paths\n    : [\n        {\n          path: current,\n          pathParams: [].concat(params as any)\n        }\n      ];\n}\n\n/**\n *\n * @param type\n * @returns {string | string[]}\n */\nexport function swaggerType(type: any): string {\n  return JsonSchema.getJsonType(type) as any;\n}\n\n/**\n * Filter the null type, unsupported by swagger and apply the right type on schema.\n * @param schema\n * @param type\n */\nexport function swaggerApplyType(schema: any, type: any): any {\n  const types = []\n    .concat(swaggerType(type) as any)\n    .filter(type => {\n      if (type === \"null\") {\n        schema.nullable = true;\n\n        return false;\n      }\n\n      return type;\n    })\n    .map(type => String(type));\n\n  if (types.length === 1) {\n    schema.type = types[0];\n  } else {\n    delete schema.type;\n    schema.oneOf = types.map(type => ({type}));\n  }\n\n  return schema;\n}\n\n/**\n *\n * @returns {{[p: string]: (collection: any[], value: any) => any}}\n */\nexport function getReducers(): {[key: string]: (collection: any[], value: any) => any} {\n  const defaultReducer = (collection: any[], value: any) => {\n    if (collection.indexOf(value) === -1) {\n      collection.push(value);\n    }\n\n    return collection;\n  };\n\n  return {\n    default: defaultReducer,\n    security: (collection, value) => {\n      const current = collection.find((current: any): any => {\n        return Object.keys(value).find(key => !!current[key]);\n      });\n\n      if (current) {\n        deepExtends(current, value, {default: defaultReducer});\n      } else {\n        collection.push(value);\n      }\n\n      return collection;\n    },\n    parameters: (collection, value) => {\n      const current = collection.find(current => current.in === value.in && current.name === value.name);\n\n      if (current) {\n        deepExtends(current, value);\n      } else {\n        collection.push(value);\n      }\n\n      return collection;\n    },\n    oneOf: (collection, value) => {\n      const current = collection.find(current => current.type === value.type);\n\n      if (current) {\n        deepExtends(current, value);\n      } else {\n        collection.push(value);\n      }\n\n      return collection;\n    }\n  };\n}\n"],"sourceRoot":"../../"}