{"version":3,"sources":["../src/swagger/decorators/title.ts"],"names":[],"mappings":";;AAAA,qCAA4C;AAC5C,oCAAoC;AACpC,mDAA8C;AAC9C,2CAAsC;AAEtC,MAAM,sBAAsB,GAAG,GAAG,CAAC,KAAK,CAAC;AAEzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDG;AACH,eAAe,KAAa;IAC1B,OAAO,CAAC,GAAG,IAAW,EAAE,EAAE;QACxB,MAAM,IAAI,GAAG,uBAAgB,CAAC,IAAI,CAAC,CAAC;QACpC,QAAQ,IAAI,EAAE;YACZ,KAAK,QAAQ;gBACX,OAAO,qBAAS,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YACrC,KAAK,WAAW;gBACd,OAAO,6BAAa,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YACzC;gBACE,sBAAsB,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;SAC1C;IACH,CAAC,CAAC;AACJ,CAAC;AAIO,sBAAK;AAFZ,GAAW,CAAC,KAAK,GAAG,KAAK,CAAC","file":"title.js","sourcesContent":["import {getDecoratorType} from \"@tsed/core\";\nimport * as mod from \"@tsed/common\";\nimport {BaseParameter} from \"./baseParameter\";\nimport {Operation} from \"./operation\";\n\nconst originalTitleDecorator = mod.Title;\n\n/**\n * Add title metadata on the decorated element.\n *\n * ## Examples\n * ### On parameter\n *\n * ```typescript\n * @Controller(\"/\")\n * class ModelCtrl {\n *    async method(@Title(\"title\") @BodyParams(\"id\") id: string) {}\n * }\n * ````\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"name\":\"body\",\n *   \"in\":\"body\",\n *   \"title\":\"title\"\n * }\n * ```\n *\n * ### On property\n *\n ```typescript\n * class Model {\n *    @Title(\"title\")\n *    id: string;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"id\": {\n *        \"type\": \"string\",\n *        \"title\": \"title\"\n *     }\n *   }\n * }\n * ```\n *\n * > Note: Title can be used on a method but swagger didn't use this key to describe an Operation.\n *\n * @param {string} title\n * @returns {(...args: any[]) => any}\n * @decorator\n * @swagger\n */\nfunction Title(title: string) {\n  return (...args: any[]) => {\n    const type = getDecoratorType(args);\n    switch (type) {\n      case \"method\":\n        return Operation({title})(...args);\n      case \"parameter\":\n        return BaseParameter({title})(...args);\n      default:\n        originalTitleDecorator(title)(...args);\n    }\n  };\n}\n\n(mod as any).Title = Title;\n\nexport {Title};\n"],"sourceRoot":"../../"}