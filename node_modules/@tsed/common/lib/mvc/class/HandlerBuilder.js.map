{"version":3,"sources":["../src/common/mvc/class/HandlerBuilder.ts"],"names":[],"mappings":"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","file":"HandlerBuilder.js","sourcesContent":["import {nameOf} from \"@tsed/core\";\nimport * as Express from \"express\";\nimport {ProviderScope} from \"../../di/interfaces\";\nimport {InjectorService} from \"../../di/services/InjectorService\";\nimport {FilterBuilder} from \"../../filters/class/FilterBuilder\";\nimport {ParamMetadata} from \"../../filters/class/ParamMetadata\";\nimport {IFilterPreHandler} from \"../../filters/interfaces/IFilterPreHandler\";\nimport {EndpointMetadata} from \"./EndpointMetadata\";\nimport {HandlerMetadata} from \"./HandlerMetadata\";\n\n/**\n * @stable\n */\nexport class HandlerBuilder {\n  private filters: any[];\n  private _handler: Function;\n  private _rebuildHandler: boolean = false;\n  private injector: InjectorService;\n  private debug: boolean;\n\n  constructor(private handlerMetadata: HandlerMetadata) {}\n\n  /**\n   *\n   * @param obj\n   * @returns {HandlerBuilder}\n   */\n  static from(obj: any | EndpointMetadata) {\n    if (obj instanceof EndpointMetadata) {\n      // Endpoint\n      return new HandlerBuilder(new HandlerMetadata(obj.target, obj.methodClassName));\n    }\n\n    // Middleware\n    return new HandlerBuilder(new HandlerMetadata(obj));\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  public build(injector: InjectorService) {\n    this.injector = injector;\n    this.debug = injector.settings.debug;\n\n    this.filters = this.handlerMetadata.services.map((param: ParamMetadata) => new FilterBuilder(injector).build(param));\n\n    if (this.handlerMetadata.errorParam) {\n      return (err: any, request: any, response: any, next: any) => this.invoke(request, response, next, err);\n    } else {\n      return (request: any, response: any, next: any) => this.invoke(request, response, next);\n    }\n  }\n\n  /**\n   *\n   * @param locals\n   * @returns {any}\n   */\n  private buildHandler<T>(locals: Map<string | Function, any> = new Map<string | Function, any>()): Function {\n    const provider = this.injector.getProvider(this.handlerMetadata.target);\n\n    /* istanbul ignore next */\n    if (!provider) {\n      throw new Error(`${nameOf(this.handlerMetadata.target)} component not found in the injector`);\n    }\n\n    const target = provider.useClass;\n    let instance = provider.instance;\n\n    this._rebuildHandler = provider.scope !== ProviderScope.SINGLETON;\n\n    if (this._rebuildHandler || instance === undefined) {\n      instance = this.injector.invoke<T>(target, locals, undefined, true);\n    }\n\n    return instance[this.handlerMetadata.methodClassName!].bind(instance);\n  }\n\n  /**\n   *\n   */\n  private getHandler(): Function {\n    if (!this._rebuildHandler && this._handler) {\n      return this._handler;\n    }\n\n    switch (this.handlerMetadata.type) {\n      default:\n      case \"function\":\n        this._handler = this.handlerMetadata.target;\n        break;\n      case \"middleware\":\n      case \"controller\":\n        this._handler = this.buildHandler();\n        break;\n    }\n\n    return this._handler;\n  }\n\n  /**\n   *\n   * @returns {Promise<TResult2|TResult1>}\n   * @param request\n   * @param response\n   * @param next\n   * @param err\n   */\n  private async invoke(request: Express.Request, response: Express.Response, next: any, err?: any): Promise<any> {\n    next = this.buildNext(request, response, next);\n\n    try {\n      this.log(request, {event: \"invoke.start\"});\n      const args = this.runFilters(request, response, next, err);\n      const result = await this.getHandler()(...args);\n\n      if (!next.isCalled) {\n        if (this.handlerMetadata.type !== \"function\" && result !== undefined) {\n          request.storeData(result);\n        }\n\n        if (!this.handlerMetadata.nextFunction) {\n          next();\n        }\n      }\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  /**\n   *\n   * @param {Express.Request} request\n   * @param o\n   * @returns {string}\n   */\n  private log(request: Express.Request, o: any = {}) {\n    if (request.id && this.debug) {\n      const target = this.handlerMetadata.target;\n      const injectable = this.handlerMetadata.injectable;\n      const methodName = this.handlerMetadata.methodClassName;\n\n      request.log.debug({\n        type: this.handlerMetadata.type,\n        target: (target ? nameOf(target) : target.name) || \"anonymous\",\n        methodName,\n        injectable,\n        data: request && request.getStoredData ? request.getStoredData() : undefined,\n        ...o\n      });\n    }\n  }\n\n  /**\n   *\n   * @param {Express.Request} request\n   * @param {Express.Response} response\n   * @param {Express.NextFunction} next\n   * @returns {any}\n   */\n  private buildNext(request: Express.Request, response: Express.Response, next: any): any {\n    next.isCalled = false;\n\n    return (error?: any) => {\n      next.isCalled = true;\n      if (response.headersSent) {\n        return;\n      }\n\n      /* istanbul ignore else */\n      this.log(request, {event: \"invoke.end\", error});\n\n      return next(error);\n    };\n  }\n\n  /**\n   *\n   * @param request\n   * @param response\n   * @param next\n   * @param err\n   */\n  private runFilters(request: Express.Request, response: Express.Response, next: Express.NextFunction, err: any) {\n    return this.filters.map((filter: IFilterPreHandler) => {\n      return filter({\n        request,\n        response,\n        next,\n        err\n      });\n    });\n  }\n}\n"],"sourceRoot":"../../../"}