{"version":3,"sources":["../src/common/interceptors/utils/interceptorInvokeFactory.ts"],"names":[],"mappings":";;AAIA;;;;;;GAMG;AACH,kCAAyC,MAAc,EAAE,WAAqC,EAAE,OAAa;IAC3G,OAAO,CAAC,QAAyB,EAAE,MAAW,EAAE,EAAE;QAChD,IAAI,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;YAC7B,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAe,WAAW,CAAE,CAAC;YAExD,2BAA2B,GAAG,IAAW;gBACvC,MAAM,OAAO,GAAG;oBACd,MAAM;oBACN,MAAM;oBACN,IAAI;oBACJ,OAAO,CAAC,GAAW;wBACjB,IAAI,CAAC,GAAG,EAAE;4BACR,OAAO,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;yBAC3C;wBAED,MAAM,GAAG,CAAC;oBACZ,CAAC;iBACF,CAAC;gBAEF,OAAO,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC/C,CAAC;YAED,MAAM,CAAC,MAAM,CAAC,GAAG,iBAAiB,CAAC;SACpC;IACH,CAAC,CAAC;AACJ,CAAC;AA1BD,4DA0BC","file":"interceptorInvokeFactory.js","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {InjectorService} from \"../../di/services/InjectorService\";\nimport {IInterceptor} from \"../interfaces/IInterceptor\";\n\n/**\n *\n * @param {string} method\n * @param {Type<*>} interceptor\n * @param options\n * @returns {(injector: InjectorService, instance: any) => void}\n */\nexport function interceptorInvokeFactory(method: string, interceptor: Type<any & IInterceptor>, options?: any) {\n  return (injector: InjectorService, target: any) => {\n    if (injector.has(interceptor)) {\n      const originalMethod = target[method];\n      const intcpt = injector.get<IInterceptor>(interceptor)!;\n\n      function interceptedMethod(...args: any[]) {\n        const context = {\n          target,\n          method,\n          args,\n          proceed(err?: Error) {\n            if (!err) {\n              return originalMethod.apply(target, args);\n            }\n\n            throw err;\n          }\n        };\n\n        return intcpt.aroundInvoke(context, options);\n      }\n\n      target[method] = interceptedMethod;\n    }\n  };\n}\n"],"sourceRoot":"../../../"}