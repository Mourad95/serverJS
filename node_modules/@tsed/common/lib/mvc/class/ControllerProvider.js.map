{"version":3,"sources":["../src/common/mvc/class/ControllerProvider.ts"],"names":[],"mappings":";;;AAAA,qCAAyD;AACzD,mCAAmC;AAEnC,sDAAiD;AAGjD,qEAAgE;AAOhE,wBAAgC,SAAQ,mBAAa;IAenD,YAAY,OAAY;QACtB,KAAK,CAAC,OAAO,CAAC,CAAC;QAVjB;;;;WAIG;QACsB,kBAAa,GAA0B,EAAE,CAAC;QAuGnE;;WAEG;QACI,mBAAc,GAAG,CAAC,UAAkB,EAAU,EAAE,CACrD,CAAC,UAAU,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QArG/F,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,IAAI,IAAI,CAAC,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,IAAI,SAAS;QACX,OAAO,mCAAgB,CAAC,YAAY,CAAC,eAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;OAGG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACH,IAAI,YAAY,CAAC,YAAmC;QAClD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED;;;OAGG;IACH,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACzC,CAAC;IAED;;;OAGG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,IAAI,aAAa,CAAC,KAAsB;QACtC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IACzC,CAAC;IAED;;;OAGG;IACH,IAAI,WAAW;QACb,OAAO,MAAM,CAAC,MAAM,CAClB;YACE,GAAG,EAAE,EAAE;YACP,QAAQ,EAAE,EAAE;YACZ,SAAS,EAAE,EAAE;SACd,EACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,CACpC,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,IAAI,WAAW,CAAC,WAAmC;QACjD,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;QAChC,MAAM,MAAM,GAAG,CAAC,GAAW,EAAE,CAAM,EAAE,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEjF,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC;IAQD;;OAEG;IACI,cAAc;QACnB,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED;;;OAGG;IACI,eAAe;QACpB,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;IACpC,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;IACpC,CAAC;IAED,KAAK;QACH,MAAM,QAAQ,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvD,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QACnC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACpC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAE5C,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AArJkB;IAAhB,oBAAa,EAAE;;iDAAuB;AAOtB;IAAhB,oBAAa,EAAE;;yDAAmD;AAElD;IAAhB,oBAAa,EAAE;;kDAA+B;AAbjD,gDAyJC","file":"ControllerProvider.js","sourcesContent":["import {getClass, NotEnumerable, Type} from \"@tsed/core\";\nimport * as Express from \"express\";\nimport {IRouterSettings} from \"../../config/interfaces/IServerSettings\";\nimport {Provider} from \"../../di/class/Provider\";\n\nimport {IControllerMiddlewares, IControllerOptions} from \"../interfaces\";\nimport {EndpointRegistry} from \"../registries/EndpointRegistry\";\nimport {EndpointMetadata} from \"./EndpointMetadata\";\n\nexport interface IChildrenController extends Type<any> {\n  $parentCtrl?: ControllerProvider;\n}\n\nexport class ControllerProvider extends Provider<any> implements IControllerOptions {\n  /**\n   * The path for the controller\n   */\n  @NotEnumerable() private _path: string;\n\n  /**\n   * Controllers that depend to this controller.\n   * @type {Array}\n   * @private\n   */\n  @NotEnumerable() private _dependencies: IChildrenController[] = [];\n\n  @NotEnumerable() public router: Express.Router;\n\n  constructor(provide: any) {\n    super(provide);\n    this.type = \"controller\";\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get path(): string {\n    return this._path;\n  }\n\n  /**\n   * set path\n   * @param value\n   */\n  set path(value: string) {\n    this._path = value;\n  }\n\n  /**\n   *\n   * @returns {Endpoint[]}\n   */\n  get endpoints(): EndpointMetadata[] {\n    return EndpointRegistry.getEndpoints(getClass(this.provide));\n  }\n\n  /**\n   *\n   * @returns {Type<any>[]}\n   */\n  get dependencies(): IChildrenController[] {\n    return this._dependencies;\n  }\n\n  /**\n   *\n   * @param dependencies\n   */\n  set dependencies(dependencies: IChildrenController[]) {\n    this._dependencies = dependencies;\n    this._dependencies.forEach(d => (d.$parentCtrl = this));\n  }\n\n  /**\n   *\n   * @returns {IRouterSettings}\n   */\n  get routerOptions(): IRouterSettings {\n    return this.store.get(\"routerOptions\");\n  }\n\n  /**\n   *\n   * @returns {ControllerProvider}\n   */\n  get parent() {\n    return this.provide.$parentCtrl;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set routerOptions(value: IRouterSettings) {\n    this.store.set(\"routerOptions\", value);\n  }\n\n  /**\n   *\n   * @returns {any[]}\n   */\n  get middlewares(): IControllerMiddlewares {\n    return Object.assign(\n      {\n        use: [],\n        useAfter: [],\n        useBefore: []\n      },\n      this.store.get(\"middlewares\") || {}\n    );\n  }\n\n  /**\n   *\n   * @param middlewares\n   */\n  set middlewares(middlewares: IControllerMiddlewares) {\n    const mdlwrs = this.middlewares;\n    const concat = (key: string, a: any, b: any) => (a[key] = a[key].concat(b[key]));\n\n    Object.keys(middlewares).forEach((key: string) => {\n      concat(key, mdlwrs, middlewares);\n    });\n    this.store.set(\"middlewares\", mdlwrs);\n  }\n\n  /**\n   * Resolve final endpoint url.\n   */\n  public getEndpointUrl = (routerPath: string): string =>\n    (routerPath === this.path ? this.path : (routerPath || \"\") + this.path).replace(/\\/\\//gi, \"/\");\n\n  /**\n   *\n   */\n  public hasEndpointUrl() {\n    return !!this.path;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  public hasDependencies(): boolean {\n    return !!this.dependencies.length;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  public hasParent(): boolean {\n    return !!this.provide.$parentCtrl;\n  }\n\n  clone(): ControllerProvider {\n    const provider = new ControllerProvider(this._provide);\n    provider._type = this._type;\n    provider.useClass = this._useClass;\n    provider._instance = this._instance;\n    provider._path = this._path;\n    provider._dependencies = this._dependencies;\n\n    return provider;\n  }\n}\n"],"sourceRoot":"../../../"}