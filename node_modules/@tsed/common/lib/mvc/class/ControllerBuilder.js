"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Express = require("express");
const EndpointBuilder_1 = require("./EndpointBuilder");
const HandlerBuilder_1 = require("./HandlerBuilder");
class ControllerBuilder {
    constructor(provider, defaultRoutersOptions = {}) {
        this.provider = provider;
        this.defaultRoutersOptions = defaultRoutersOptions;
        this.provider.router = Express.Router(Object.assign({}, defaultRoutersOptions, this.provider.routerOptions));
    }
    /**
     *
     * @returns {any}
     */
    build(injector) {
        const ctrl = this.provider;
        this.buildMiddlewares(injector, this.provider.middlewares.useBefore);
        ctrl.endpoints.forEach(endpoint => {
            new EndpointBuilder_1.EndpointBuilder(endpoint, this.provider.router).build(injector); // this.provider.middlewares.use
        });
        this.buildMiddlewares(injector, this.provider.middlewares.useAfter);
        ctrl.dependencies.forEach((child) => {
            const provider = injector.getProvider(child);
            /* istanbul ignore next */
            if (!provider) {
                throw new Error("Controller component not found in the ControllerRegistry");
            }
            const ctrlBuilder = new ControllerBuilder(provider, this.defaultRoutersOptions).build(injector);
            this.provider.router.use(provider.path, ctrlBuilder.provider.router);
        });
        return this;
    }
    buildMiddlewares(injector, middlewares) {
        return middlewares
            .filter(o => typeof o === "function")
            .forEach((middleware) => this.provider.router.use(HandlerBuilder_1.HandlerBuilder.from(middleware).build(injector)));
    }
}
exports.ControllerBuilder = ControllerBuilder;

//# sourceMappingURL=ControllerBuilder.js.map
