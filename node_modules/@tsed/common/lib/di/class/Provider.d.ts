import { Store, Type } from "@tsed/core";
import { ProviderScope } from "../interfaces";
import { IProvider } from "../interfaces/IProvider";
import { ProviderType } from "../interfaces/ProviderType";
export declare class Provider<T> implements IProvider<T> {
    protected _provide: any;
    protected _useClass: Type<T>;
    protected _instance: T;
    protected _type: ProviderType | any;
    private _store;
    constructor(_provide: any);
    /**
     *
     * @returns {any}
     */
    /**
     *
     * @param value
     */
    provide: any;
    /**
     *
     * @returns {Type<T>}
     */
    /**
     *
     * @param value
     */
    useClass: Type<T>;
    /**
     *
     * @returns {T}
     */
    /**
     *
     * @param value
     */
    instance: T;
    /**
     *
     * @returns {any}
     */
    /**
     *
     * @param value
     */
    type: any;
    /**
     *
     * @returns {string}
     */
    readonly className: string;
    /**
     *
     * @returns {Store}
     */
    readonly store: Store;
    /**
     * Get the scope of the provider.
     * @returns {boolean}
     */
    /**
     * Change the scope value of the provider.
     * @param scope
     */
    scope: ProviderScope;
    clone(): Provider<any>;
}
