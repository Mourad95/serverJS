"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@tsed/common");
const core_1 = require("@tsed/core");
const utils_1 = require("../utils");
/**
 * Build a Schema from a given Model.
 */
class OpenApiModelSchemaBuilder {
    constructor(target) {
        this.target = target;
        this._definitions = {};
        this._responses = {};
    }
    /**
     * Build the Schema and his properties.
     * @returns {OpenApiModelSchemaBuilder}
     */
    build() {
        const properties = common_1.PropertyRegistry.getProperties(this.target);
        const store = core_1.Store.from(this.target);
        const schema = this.getClassSchema();
        schema.type = "object";
        schema.properties = {};
        if (store.get("description")) {
            schema.description = schema.description || store.get("description");
        }
        if (schema.required && schema.required.length) {
            this._responses[400] = { description: "Missing required parameter" };
        }
        properties.forEach((property) => {
            const propertyKey = property.name || property.propertyKey;
            schema.properties[propertyKey] = this.createSchema(property);
        });
        this._schema = schema;
        this._definitions[core_1.nameOf(this.target)] = this.schema;
        return this;
    }
    /**
     *
     * @param {Storable} model
     * @returns {Schema}
     */
    createSchema(model) {
        let builder;
        let schema = model.store.get("schema") || {};
        if (schema instanceof common_1.JsonSchema) {
            schema = schema.toObject();
        }
        if (model.isClass) {
            builder = new OpenApiModelSchemaBuilder(model.type);
            builder.build();
            core_1.deepExtends(this._definitions, builder.definitions);
        }
        if (model.isCollection) {
            if (model.isArray) {
                schema.type = "array";
                if (!schema.items) {
                    if (model.isClass) {
                        schema.items = {
                            $ref: `#/definitions/${model.typeName}`
                        };
                    }
                    else {
                        schema.items = utils_1.swaggerApplyType({}, (schema.additionalProperties && schema.additionalProperties.type) || model.type);
                    }
                }
                return schema;
            }
            schema.type = schema.type || "object";
            if (model.isClass) {
                schema.additionalProperties = {
                    $ref: `#/definitions/${model.typeName}`
                };
                return schema;
            }
            schema.additionalProperties = utils_1.swaggerApplyType({}, (schema.additionalProperties && schema.additionalProperties.type) || model.type);
            return schema;
        }
        if (model.isClass) {
            schema.$ref = `#/definitions/${model.typeName}`;
            delete schema.type;
            return schema;
        }
        schema = utils_1.swaggerApplyType(schema, schema.type || model.type);
        return schema;
    }
    /**
     * Return the stored Schema of the class if exists. Otherwise, return an empty Schema.
     * @returns {any}
     */
    getClassSchema() {
        const schema = common_1.JsonSchemesRegistry.getSchemaDefinition(this.target) || {};
        delete schema.definitions;
        return schema;
    }
    get schema() {
        return this._schema;
    }
    get definitions() {
        return this._definitions;
    }
    get responses() {
        return this._responses;
    }
}
exports.OpenApiModelSchemaBuilder = OpenApiModelSchemaBuilder;
/**
 * @deprecated
 */
class OpenApiPropertiesBuilder extends OpenApiModelSchemaBuilder {
}
exports.OpenApiPropertiesBuilder = OpenApiPropertiesBuilder;

//# sourceMappingURL=OpenApiModelSchemaBuilder.js.map
