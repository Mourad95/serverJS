"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@tsed/core");
const Provider_1 = require("./Provider");
class Providers extends core_1.Registry {
    constructor() {
        super(Provider_1.Provider);
        /**
         * Internal Map
         * @type {Array}
         */
        this._registries = new Map();
    }
    /**
     *
     * @param {string} type
     * @param {Type<Provider<any>>} model
     * @param options
     * @returns {Registry<Provider<any>, IProvider<any>>}
     */
    createRegistry(type, model, options = {}) {
        const registry = new core_1.Registry(model, {
            onCreate: this.set.bind(this)
        });
        this._registries.set(type, Object.assign({
            registry,
            injectable: true,
            buildable: true
        }, options));
        return registry;
    }
    /**
     *
     * @param {string | RegistryKey} target
     * @returns {RegistrySettings | undefined}
     */
    getRegistrySettings(target) {
        let type = "provider";
        if (typeof target === "string") {
            type = target;
        }
        else {
            const provider = this.get(target);
            if (provider) {
                type = provider.type;
            }
        }
        if (this._registries.has(type)) {
            return this._registries.get(type);
        }
        return {
            registry: this,
            injectable: true,
            buildable: true
        };
    }
    /**
     *
     * @returns {(provider: (any | IProvider<any>), instance?: any) => void}
     */
    createRegisterFn(type) {
        return (provider, instance) => {
            if (!provider.provide) {
                provider = {
                    provide: provider
                };
            }
            provider = Object.assign({ instance }, provider, { type });
            this.getRegistry(type).merge(provider.provide, provider);
        };
    }
    /**
     *
     * @param {string | RegistryKey} target
     * @returns {Registry<Provider<any>, IProvider<any>>}
     */
    getRegistry(target) {
        return this.getRegistrySettings(target).registry;
    }
}
exports.Providers = Providers;

//# sourceMappingURL=Providers.js.map
