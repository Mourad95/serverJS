{"version":3,"sources":["../src/common/filters/services/FilterService.ts"],"names":[],"mappings":";;;AAAA,qCAAsD;AACtD,sDAAiD;AACjD,yDAAoD;AACpD,mEAA8D;AAC9D,uEAAkE;AAClE,mEAA8D;AAE9D,iEAA4D;AAE5D;;GAEG;AAEH,IAAa,aAAa,GAA1B,mBAA2B,SAAQ,eAAwC;IACzE,YAAoB,eAAgC;QAClD,KAAK,CAAC,eAAe,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,2BAAY,CAAC,MAAM,EAAC,EAAC,CAAC,CAAC;QAD5C,oBAAe,GAAf,eAAe,CAAiB;IAEpD,CAAC;IAED;;;;OAIG;IAEH,AACA,0BAD0B;IAC1B,MAAM,CAAC,GAAG,CAAC,MAAiB;QAC1B,OAAO,+BAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IAEH,AACA,0BAD0B;IAC1B,MAAM,CAAC,GAAG,CAAC,MAAiB,EAAE,QAAuB;QACnD,+BAAc,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IAEH,AACA,0BAD0B;IAC1B,MAAM,CAAC,GAAG,CAAC,MAAiB;QAC1B,OAAO,+BAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;OAMG;IAEH,AACA,0BAD0B;IAC1B,MAAM,CAAoB,MAAe,EAAE,SAA6B,IAAI,GAAG,EAAiB,EAAE,gBAAwB;QACxH,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAI,MAAM,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;OAKG;IAEH,YAAY,CAAoB,MAAe,EAAE,GAAG,IAAW;QAC7D,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAU,MAAM,CAAC,CAAC;QAE3D,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YACpC,MAAM,IAAI,qCAAiB,CAAC,MAAM,CAAC,CAAC;SACrC;QAED,MAAM,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,GAAG,IAAI,CAAC;QAE7C,OAAO,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC3D,CAAC;CACF,CAAA;AAtBC;IAFC,iBAAU,CAAC,+DAA+D,CAAC;IAC5E,0BAA0B;;;6CACQ,WAAI,EAAa,GAAG;;2CAErD;AASD;IADC,iBAAU,CAAC,yCAAyC,CAAC;;6CACd,WAAI;;iDAU3C;AA1DD;IAFC,iBAAU,CAAC,8CAA8C,CAAC;IAC3D,0BAA0B;;;6CACP,WAAI;;8BAEtB;AAUD;IAFC,iBAAU,CAAC,8CAA8C,CAAC;IAC3D,0BAA0B;;;6CACP,WAAI,EAAiB,mBAAQ;;8BAI/C;AAQD;IAFC,iBAAU,CAAC,8CAA8C,CAAC;IAC3D,0BAA0B;;;6CACP,WAAI;;8BAEtB;AAtCU,aAAa;IADzB,iBAAO,EAAE;6CAE6B,iCAAe;GADzC,aAAa,CAuEzB;AAvEY,sCAAa","file":"FilterService.js","sourcesContent":["import {Deprecated, ProxyMap, Type} from \"@tsed/core\";\nimport {Provider} from \"../../di/class/Provider\";\nimport {Service} from \"../../di/decorators/service\";\nimport {ProviderType} from \"../../di/interfaces/ProviderType\";\nimport {InjectorService} from \"../../di/services/InjectorService\";\nimport {UnknowFilterError} from \"../errors/UnknowFilterError\";\nimport {IFilter} from \"../interfaces\";\nimport {FilterRegistry} from \"../registries/FilterRegistry\";\n\n/**\n * @deprecated This service will be removed in a future release. Use injectorService directly.\n */\n@Service()\nexport class FilterService extends ProxyMap<Type<any> | any, Provider<any>> {\n  constructor(private injectorService: InjectorService) {\n    super(injectorService, {filter: {type: ProviderType.FILTER}});\n  }\n\n  /**\n   *\n   * @param target\n   * @returns {ControllerProvider}\n   */\n  @Deprecated(\"static FilterService.get(). Removed feature.\")\n  /* istanbul ignore next */\n  static get(target: Type<any>): Provider<any> | undefined {\n    return FilterRegistry.get(target);\n  }\n\n  /**\n   *\n   * @deprecated\n   * @param target\n   * @param provider\n   */\n  @Deprecated(\"static FilterService.set(). Removed feature.\")\n  /* istanbul ignore next */\n  static set(target: Type<any>, provider: Provider<any>) {\n    FilterRegistry.set(target, provider);\n\n    return this;\n  }\n\n  /**\n   * @deprecated\n   * @param target\n   */\n  @Deprecated(\"static FilterService.has(). Removed feature.\")\n  /* istanbul ignore next */\n  static has(target: Type<any>): boolean {\n    return FilterRegistry.has(target);\n  }\n\n  /**\n   * @deprecated\n   * @param target\n   * @param locals\n   * @param designParamTypes\n   * @returns {T}\n   */\n  @Deprecated(\"FilterService.invoke(). Use injectorService.invoke instead of\")\n  /* istanbul ignore next */\n  invoke<T extends IFilter>(target: Type<T>, locals: Map<Function, any> = new Map<Function, any>(), designParamTypes?: any[]): T {\n    return this.injectorService.invoke<T>(target, locals, designParamTypes);\n  }\n\n  /**\n   * @deprecated\n   * @param target\n   * @param args\n   * @returns {any}\n   */\n  @Deprecated(\"FilterService.invoke(). Removed feature\")\n  invokeMethod<T extends IFilter>(target: Type<T>, ...args: any[]): any {\n    const instance = this.injectorService.get<IFilter>(target);\n\n    if (!instance || !instance.transform) {\n      throw new UnknowFilterError(target);\n    }\n\n    const [expression, request, response] = args;\n\n    return instance.transform(expression, request, response);\n  }\n}\n"],"sourceRoot":"../../../"}