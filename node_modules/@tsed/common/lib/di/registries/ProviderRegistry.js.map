{"version":3,"sources":["../src/common/di/registries/ProviderRegistry.ts"],"names":[],"mappings":";;AAAA,gDAA2C;AAC3C,kDAA6C;AAC7C,8CAA8E;AAE9E;;;GAGG;AACH,0CAA0C;AAC7B,QAAA,eAAe,GAAG,IAAI,qBAAS,EAAE,CAAC;AAC/C;;;GAGG;AACH,0CAA0C;AAC7B,QAAA,gBAAgB,GAA2B,uBAAe,CAAC,WAAW,CAAC,yBAAY,CAAC,QAAQ,CAAC,CAAC;AAC3G;;;GAGG;AACH,uBAAe,CAAC,cAAc,CAAC,yBAAY,CAAC,OAAO,EAAE,mBAAQ,EAAE;IAC7D,UAAU,EAAE,IAAI;IAChB,SAAS,EAAE,IAAI;CAChB,CAAC,CAAC;AACH;;;GAGG;AACH,uBAAe,CAAC,cAAc,CAAC,yBAAY,CAAC,OAAO,EAAE,mBAAQ,EAAE;IAC7D,UAAU,EAAE,IAAI;IAChB,SAAS,EAAE,KAAK;CACjB,CAAC,CAAC;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8DG;AACU,QAAA,eAAe,GAAG,uBAAe,CAAC,gBAAgB,CAAC,yBAAY,CAAC,OAAO,CAAC,CAAC;AACtF;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACU,QAAA,eAAe,GAAG,uBAAe,CAAC,gBAAgB,CAAC,yBAAY,CAAC,OAAO,CAAC,CAAC;AAEtF;;;GAGG;AACH,0BAAiC,QAAiC;IAChE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;KACjD;IAED,wBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AACrD,CAAC;AAND,4CAMC","file":"ProviderRegistry.js","sourcesContent":["import {Provider} from \"../class/Provider\";\nimport {Providers} from \"../class/Providers\";\nimport {IProvider, ProviderType, TypedProvidersRegistry} from \"../interfaces\";\n\n/**\n *\n * @type {Providers}\n */\n// tslint:disable-next-line: variable-name\nexport const GlobalProviders = new Providers();\n/**\n *\n * @type {Providers}\n */\n// tslint:disable-next-line: variable-name\nexport const ProviderRegistry: TypedProvidersRegistry = GlobalProviders.getRegistry(ProviderType.PROVIDER);\n/**\n *\n * @type {Registry<Provider<any>, IProvider<any>>}\n */\nGlobalProviders.createRegistry(ProviderType.SERVICE, Provider, {\n  injectable: true,\n  buildable: true\n});\n/**\n *`\n * @type {Registry<Provider<any>, IProvider<any>>}\n */\nGlobalProviders.createRegistry(ProviderType.FACTORY, Provider, {\n  injectable: true,\n  buildable: false\n});\n\n/**\n * Add a new factory in the `ProviderRegistry`.\n *\n * #### Example with symbol definition\n *\n *\n * ```typescript\n * import {registerFactory, InjectorService} from \"@tsed/common\";\n *\n * export interface IMyFooFactory {\n *    getFoo(): string;\n * }\n *\n * export type MyFooFactory = IMyFooFactory;\n * export const MyFooFactory = Symbol(\"MyFooFactory\");\n *\n * registerFactory(MyFooFactory, {\n *      getFoo:  () => \"test\"\n * });\n *\n * // or\n *\n * registerFactory({provide: MyFooFactory, instance: {\n *      getFoo:  () => \"test\"\n * }});\n *\n * @Service()\n * export class OtherService {\n *      constructor(@Inject(MyFooFactory) myFooFactory: MyFooFactory){\n *          console.log(myFooFactory.getFoo()); /// \"test\"\n *      }\n * }\n * ```\n *\n * > Note: When you use the factory method with Symbol definition, you must use the `@Inject()`\n * decorator to retrieve your factory in another Service. Advice: By convention all factory class name will be prefixed by\n * `Factory`.\n *\n * #### Example with class\n *\n * ```typescript\n * import {InjectorService, registerFactory} from \"@tsed/common\";\n *\n * export class MyFooService {\n *  constructor(){}\n *      getFoo() {\n *          return \"test\";\n *      }\n * }\n *\n * registerFactory(MyFooService, new MyFooService());\n * // or\n * registerFactory({provider: MyFooService, instance: new MyFooService()});\n *\n * @Service()\n * export class OtherService {\n *      constructor(myFooService: MyFooService){\n *          console.log(myFooFactory.getFoo()); /// \"test\"\n *      }\n * }\n * ```\n *\n */\nexport const registerFactory = GlobalProviders.createRegisterFn(ProviderType.FACTORY);\n/**\n * Add a new service in the `ProviderRegistry`. This service will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerService, InjectorService} from \"@tsed/common\";\n *\n * export default class MyFooService {\n *     constructor(){}\n *     getFoo() {\n *         return \"test\";\n *     }\n * }\n *\n * registerService({provide: MyFooService});\n * // or\n * registerService(MyFooService);\n *\n * const injector = new InjectorService();\n * injector.load();\n *\n * const myFooService = injector.get<MyFooService>(MyFooService);\n * myFooService.getFoo(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport const registerService = GlobalProviders.createRegisterFn(ProviderType.SERVICE);\n\n/**\n * Register a provider configuration.\n * @param {IProvider<any>} provider\n */\nexport function registerProvider(provider: Partial<IProvider<any>>): void {\n  if (!provider.provide) {\n    throw new Error(\"Provider.provide is required\");\n  }\n\n  ProviderRegistry.merge(provider.provide, provider);\n}\n"],"sourceRoot":"../../../"}