"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const Express = require("express");
const Provider_1 = require("../../di/class/Provider");
const EndpointRegistry_1 = require("../registries/EndpointRegistry");
class ControllerProvider extends Provider_1.Provider {
    constructor(provide) {
        super(provide);
        /**
         * Controllers that depend to this controller.
         * @type {Array}
         * @private
         */
        this._dependencies = [];
        /**
         * Resolve final endpoint url.
         */
        this.getEndpointUrl = (routerPath) => (routerPath === this.path ? this.path : (routerPath || "") + this.path).replace(/\/\//gi, "/");
        this.type = "controller";
    }
    /**
     *
     * @returns {string}
     */
    get path() {
        return this._path;
    }
    /**
     * set path
     * @param value
     */
    set path(value) {
        this._path = value;
    }
    /**
     *
     * @returns {Endpoint[]}
     */
    get endpoints() {
        return EndpointRegistry_1.EndpointRegistry.getEndpoints(core_1.getClass(this.provide));
    }
    /**
     *
     * @returns {Type<any>[]}
     */
    get dependencies() {
        return this._dependencies;
    }
    /**
     *
     * @param dependencies
     */
    set dependencies(dependencies) {
        this._dependencies = dependencies;
        this._dependencies.forEach(d => (d.$parentCtrl = this));
    }
    /**
     *
     * @returns {IRouterSettings}
     */
    get routerOptions() {
        return this.store.get("routerOptions");
    }
    /**
     *
     * @returns {ControllerProvider}
     */
    get parent() {
        return this.provide.$parentCtrl;
    }
    /**
     *
     * @param value
     */
    set routerOptions(value) {
        this.store.set("routerOptions", value);
    }
    /**
     *
     * @returns {any[]}
     */
    get middlewares() {
        return Object.assign({
            use: [],
            useAfter: [],
            useBefore: []
        }, this.store.get("middlewares") || {});
    }
    /**
     *
     * @param middlewares
     */
    set middlewares(middlewares) {
        const mdlwrs = this.middlewares;
        const concat = (key, a, b) => (a[key] = a[key].concat(b[key]));
        Object.keys(middlewares).forEach((key) => {
            concat(key, mdlwrs, middlewares);
        });
        this.store.set("middlewares", mdlwrs);
    }
    /**
     *
     */
    hasEndpointUrl() {
        return !!this.path;
    }
    /**
     *
     * @returns {boolean}
     */
    hasDependencies() {
        return !!this.dependencies.length;
    }
    /**
     *
     * @returns {boolean}
     */
    hasParent() {
        return !!this.provide.$parentCtrl;
    }
    clone() {
        const provider = new ControllerProvider(this._provide);
        provider._type = this._type;
        provider.useClass = this._useClass;
        provider._instance = this._instance;
        provider._path = this._path;
        provider._dependencies = this._dependencies;
        return provider;
    }
}
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", String)
], ControllerProvider.prototype, "_path", void 0);
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", Array)
], ControllerProvider.prototype, "_dependencies", void 0);
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", Function)
], ControllerProvider.prototype, "router", void 0);
exports.ControllerProvider = ControllerProvider;

//# sourceMappingURL=ControllerProvider.js.map
