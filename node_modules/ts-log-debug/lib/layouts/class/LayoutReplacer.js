"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Os = require("os");
var logColors_1 = require("../constants/logColors");
var colorizeUtils_1 = require("../utils/colorizeUtils");
var inspectUtils_1 = require("../utils/inspectUtils");
/**
 *
 */
var dateFormat = require("date-format");
var eol = Os.EOL || "\n";
var LayoutReplacer = /** @class */ (function () {
    function LayoutReplacer(tokens, timezoneOffset) {
        var _this = this;
        this.tokens = tokens;
        this.timezoneOffset = timezoneOffset;
        /**
         *
         * @param loggingEvent
         * @param specifier
         * @returns {any}
         */
        this.categoryName = function (loggingEvent, specifier) {
            var loggerName = loggingEvent.categoryName;
            if (specifier) {
                var precision = parseInt(specifier, 10);
                var loggerNameBits = loggerName.split(".");
                if (precision < loggerNameBits.length) {
                    loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join(".");
                }
            }
            return loggerName;
        };
        /**
         *
         * @param loggingEvent
         * @param specifier
         * @returns {any}
         */
        this.formatAsDate = function (loggingEvent, specifier) {
            var format = dateFormat.ISO8601_FORMAT;
            if (specifier) {
                format = specifier;
                // Pick up special cases
                if (format === "ISO8601") {
                    format = dateFormat.ISO8601_FORMAT;
                }
                else if (format === "ISO8601_WITH_TZ_OFFSET") {
                    format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;
                }
                else if (format === "ABSOLUTE") {
                    format = dateFormat.ABSOLUTETIME_FORMAT;
                }
                else if (format === "DATE") {
                    format = dateFormat.DATETIME_FORMAT;
                }
            }
            // Format the date
            return dateFormat.asString(format, loggingEvent.startTime, _this.timezoneOffset);
        };
        /**
         *
         * @returns {string}
         */
        this.hostname = function () {
            return Os.hostname().toString();
        };
        /**
         *
         * @param loggingEvent
         * @returns {any}
         */
        this.formatMessage = function (loggingEvent) {
            return inspectUtils_1.formatLogData(loggingEvent.data);
        };
        /**
         *
         * @returns {string|string}
         */
        this.endOfLine = function () {
            return eol;
        };
        /**
         *
         * @param loggingEvent
         * @returns {string}
         */
        this.logLevel = function (loggingEvent) {
            return loggingEvent.level.toString();
        };
        /**
         *
         * @param loggingEvent
         * @returns {any}
         */
        this.startTime = function (loggingEvent) {
            return dateFormat.asString("hh:mm:ss", loggingEvent.startTime, _this.timezoneOffset);
        };
        /**
         *
         * @param loggingEvent
         * @returns {string}
         */
        this.startColour = function (loggingEvent) {
            var index = loggingEvent.level.toString();
            return colorizeUtils_1.colorizeStart(logColors_1.LOG_COLORS[index]);
        };
        /**
         *
         * @param loggingEvent
         * @returns {string}
         */
        this.endColour = function (loggingEvent) {
            var index = loggingEvent.level.toString();
            return colorizeUtils_1.colorizeEnd(logColors_1.LOG_COLORS[index]);
        };
        /**
         *
         * @returns {string}
         */
        this.percent = function () {
            return "%";
        };
        /**
         *
         * @param loggingEvent
         * @returns {string}
         */
        this.pid = function (loggingEvent) {
            return loggingEvent && loggingEvent.pid ? loggingEvent.pid.toString() : process.pid.toString();
        };
        /**
         *
         * @param loggingEvent
         * @param specifier
         * @returns {any}
         */
        this.clusterInfo = function (loggingEvent, specifier) {
            if (loggingEvent.cluster && specifier) {
                return specifier
                    .replace("%m", loggingEvent.cluster.master)
                    .replace("%w", loggingEvent.cluster.worker)
                    .replace("%i", loggingEvent.cluster.workerId);
            }
            else if (loggingEvent.cluster) {
                return loggingEvent.cluster.worker + "@" + loggingEvent.cluster.master;
            }
            return _this.pid();
        };
        /**
         *
         * @param loggingEvent
         * @param specifier
         * @returns {any}
         */
        this.userDefined = function (loggingEvent, specifier) {
            if (typeof _this.tokens[specifier] !== "undefined") {
                return typeof _this.tokens[specifier] === "function" ? _this.tokens[specifier](loggingEvent) : _this.tokens[specifier];
            }
            return null;
        };
    }
    LayoutReplacer.prototype.build = function () {
        return {
            "c": this.categoryName,
            "d": this.formatAsDate,
            "h": this.hostname,
            "m": this.formatMessage,
            "n": this.endOfLine,
            "p": this.logLevel,
            "r": this.startTime,
            "[": this.startColour,
            "]": this.endColour,
            "y": this.clusterInfo,
            "z": this.pid,
            "%": this.percent,
            "x": this.userDefined
        };
    };
    return LayoutReplacer;
}());
exports.LayoutReplacer = LayoutReplacer;
//# sourceMappingURL=LayoutReplacer.js.map