"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Express = require("express");
const ts_httpexceptions_1 = require("ts-httpexceptions");
const endpointInfo_1 = require("../../filters/decorators/endpointInfo");
const next_1 = require("../../filters/decorators/next");
const request_1 = require("../../filters/decorators/request");
const EndpointMetadata_1 = require("../class/EndpointMetadata");
const middleware_1 = require("../decorators/class/middleware");
/**
 * This middleware manage the authentication.
 * @private
 * @middleware
 */
let AuthenticatedMiddleware = class AuthenticatedMiddleware {
    use(endpoint, request, next) {
        // const options = endpoint.get(AuthenticatedMiddleware) || {};
        const isAuthenticated = request.isAuthenticated;
        if (typeof isAuthenticated === "function") {
            if (!isAuthenticated()) {
                next(new ts_httpexceptions_1.Forbidden("Forbidden"));
                return;
            }
        }
        next();
    }
};
tslib_1.__decorate([
    tslib_1.__param(0, endpointInfo_1.EndpointInfo()), tslib_1.__param(1, request_1.Request()), tslib_1.__param(2, next_1.Next()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [EndpointMetadata_1.EndpointMetadata, Object, Function]),
    tslib_1.__metadata("design:returntype", void 0)
], AuthenticatedMiddleware.prototype, "use", null);
AuthenticatedMiddleware = tslib_1.__decorate([
    middleware_1.Middleware()
], AuthenticatedMiddleware);
exports.AuthenticatedMiddleware = AuthenticatedMiddleware;

//# sourceMappingURL=AuthenticatedMiddleware.js.map
