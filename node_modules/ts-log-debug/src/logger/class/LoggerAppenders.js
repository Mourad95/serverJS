"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module logger
 */
/** */
var AppendersRegistry_1 = require("../../appenders/registries/AppendersRegistry");
var LoggerAppenders = /** @class */ (function () {
    function LoggerAppenders() {
        this._appenders = new Map();
        this._lvls = new Map();
    }
    Object.defineProperty(LoggerAppenders.prototype, "size", {
        get: function () {
            return this._appenders.size;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The `has() method returns a boolean indicating whether an element with the specified configuration name exists or not.
     * @param name Required. The key of the element to test for presence in the Map object.`
     * @returns {boolean}
     */
    LoggerAppenders.prototype.has = function (name) {
        return this._appenders.has(name);
    };
    /**
     * The `get() method returns a specified element from a loggerAppenders.
     * @param name Required. The configuration of the element to return from the Map object.
     * @returns {ILoggerAppender}
     */
    LoggerAppenders.prototype.get = function (name) {
        return this._appenders.get(name);
    };
    /**
     * The `set()` method adds or updates an element with a specified key and value to a loggerAppenders object.
     * @param name Required. The key of the element to add to the loggerAppenders object.
     * @param config Required. The config of the element to add to the loggerAppenders object.
     * @returns {LoggerAppender}
     */
    LoggerAppenders.prototype.set = function (name, config) {
        if (!AppendersRegistry_1.AppendersRegistry.has(config.type)) {
            var error = new Error("Appender " + config.type + " doesn't exists. Check your configuration:\n" + JSON.stringify(config) + "\n");
            error.name = "UNKNOW_APPENDER";
            throw (error);
        }
        var klass = (AppendersRegistry_1.AppendersRegistry.get(config.type).provide);
        var instance = new klass(config);
        this._appenders.set(name, { name: name, instance: instance, config: config });
        this._lvls.clear();
        return this;
    };
    /**
     * Remove all configuration that match with the `name`.
     * @param name Required. The key of the element to remove from the loggerAppenders object.
     * @returns {boolean} Returns true if an element in the Map object existed and has been removed, or false if the element does not exist.
     */
    LoggerAppenders.prototype.delete = function (name) {
        var existed = this._appenders.delete(name);
        if (existed) {
            this._lvls.clear();
        }
        return existed;
    };
    /**
     * The `clear() method removes all elements from a loggerAppenders object.
     */
    LoggerAppenders.prototype.clear = function () {
        this._appenders.clear();
        this._lvls.clear();
    };
    /**
     * The `forEach()` method executes a provided function once per each key/value pair in the loggerAppenders object, in insertion order.
     * @param callback Function to execute for each element.
     * @param thisArg Value to use as this when executing callback.
     */
    LoggerAppenders.prototype.forEach = function (callback, thisArg) {
        this._appenders.forEach(callback, thisArg);
    };
    /**
     *
     * @returns {Array}
     */
    LoggerAppenders.prototype.toArray = function () {
        var array = [];
        this._appenders.forEach(function (o) { return array.push(o); });
        return array;
    };
    /**
     * Return all appenders that match with the given loggingLevel.
     * @param loggingLevel
     * @returns {[BaseAppender]}
     */
    LoggerAppenders.prototype.byLogLevel = function (loggingLevel) {
        var level = loggingLevel.toString();
        if (this._lvls.has(level)) {
            return this._lvls.get(level);
        }
        var list = this.toArray()
            .filter(function (appender) {
            return appender.config.levels
                ?
                    appender.config.levels.find(function (level) { return level.toUpperCase() === loggingLevel.toString(); })
                :
                    true;
        })
            .map(function (appender) { return appender.instance; });
        this._lvls.set(loggingLevel.toString(), list);
        return list;
    };
    return LoggerAppenders;
}());
exports.LoggerAppenders = LoggerAppenders;
//# sourceMappingURL=LoggerAppenders.js.map