{"version":3,"sources":["../src/common/mvc/services/MiddlewareService.ts"],"names":[],"mappings":";;;AAAA,qCAAsD;AACtD,sDAAiD;AACjD,yDAAoD;AACpD,mEAA8D;AAC9D,2EAAsE;AACtE,uEAAkE;AAClE,2EAAsE;AAGtE;;GAEG;AAEH,IAAa,iBAAiB,GAA9B,uBAA+B,SAAQ,eAAwC;IAC7E,YAAoB,eAAgC;QAClD,KAAK,CAAC,eAAe,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,2BAAY,CAAC,UAAU,EAAC,EAAC,CAAC,CAAC;QADhD,oBAAe,GAAf,eAAe,CAAiB;IAEpD,CAAC;IAED;;;;;OAKG;IAEH,AACA,0BAD0B;IAC1B,MAAM,CAAC,GAAG,CAAC,MAAiB;QAC1B,OAAO,mCAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IAEH,AACA,0BAD0B;IAC1B,MAAM,CAAC,GAAG,CAAC,MAAiB,EAAE,QAAuB;QACnD,mCAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEvC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IAEH,AACA,0BAD0B;IAC1B,MAAM,CAAC,GAAG,CAAC,MAAiB;QAC1B,OAAO,mCAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IAEH,AACA,0BAD0B;IAC1B,MAAM,CAAwB,MAAe,EAAE,SAA6B,IAAI,GAAG,EAAiB,EAAE,gBAAwB;QAC5H,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAI,MAAM,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;OAKG;IAEH,AACA,0BAD0B;IAC1B,YAAY,CAAwB,MAAe,EAAE,GAAG,IAAW;QACjE,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAI,MAAM,CAAC,CAAC;QAErD,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE;YAC9B,MAAM,IAAI,6CAAqB,CAAC,MAAM,CAAC,CAAC;SACzC;QAED,OAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;IAC/B,CAAC;CACF,CAAA;AArBC;IAFC,iBAAU,CAAC,qFAAqF,CAAC;IAClG,0BAA0B;;;6CACY,WAAI,EAAa,GAAG;;+CAEzD;AAUD;IAFC,iBAAU,CAAC,mDAAmD,CAAC;IAChE,0BAA0B;;;6CACkB,WAAI;;qDAQ/C;AAzDD;IAFC,iBAAU,CAAC,kDAAkD,CAAC;IAC/D,0BAA0B;;;6CACP,WAAI;;kCAEtB;AASD;IAFC,iBAAU,CAAC,kDAAkD,CAAC;IAC/D,0BAA0B;;;6CACP,WAAI,EAAiB,mBAAQ;;kCAI/C;AASD;IAFC,iBAAU,CAAC,kDAAkD,CAAC;IAC/D,0BAA0B;;;6CACP,WAAI;;kCAEtB;AAvCU,iBAAiB;IAD7B,iBAAO,EAAE;6CAE6B,iCAAe;GADzC,iBAAiB,CAuE7B;AAvEY,8CAAiB","file":"MiddlewareService.js","sourcesContent":["import {Deprecated, ProxyMap, Type} from \"@tsed/core\";\nimport {Provider} from \"../../di/class/Provider\";\nimport {Service} from \"../../di/decorators/service\";\nimport {ProviderType} from \"../../di/interfaces/ProviderType\";\nimport {ProviderRegistry} from \"../../di/registries/ProviderRegistry\";\nimport {InjectorService} from \"../../di/services/InjectorService\";\nimport {UnknowMiddlewareError} from \"../errors/UnknowMiddlewareError\";\nimport {IMiddleware} from \"../interfaces\";\n\n/**\n * @deprecated This service will be removed in a future release. Use injectorService directly.\n */\n@Service()\nexport class MiddlewareService extends ProxyMap<Type<any> | any, Provider<any>> {\n  constructor(private injectorService: InjectorService) {\n    super(injectorService, {filter: {type: ProviderType.MIDDLEWARE}});\n  }\n\n  /**\n   *\n   * @param target\n   * @returns {Provider}\n   * @deprecated\n   */\n  @Deprecated(\"static MiddlewareService.get(). Removed feature.\")\n  /* istanbul ignore next */\n  static get(target: Type<any>): Provider<any> | undefined {\n    return ProviderRegistry.get(target);\n  }\n\n  /**\n   *\n   * @param target\n   * @param provider\n   */\n  @Deprecated(\"static MiddlewareService.set(). Removed feature.\")\n  /* istanbul ignore next */\n  static set(target: Type<any>, provider: Provider<any>) {\n    ProviderRegistry.set(target, provider);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param target\n   * @deprecated\n   */\n  @Deprecated(\"static MiddlewareService.has(). Removed feature.\")\n  /* istanbul ignore next */\n  static has(target: Type<any>): boolean {\n    return ProviderRegistry.has(target);\n  }\n\n  /**\n   *\n   * @param target\n   * @param locals\n   * @param designParamTypes\n   * @returns {T}\n   */\n  @Deprecated(\"MiddlewareService.invoke(). Removed feature. Use injectorService.invoke instead of.\")\n  /* istanbul ignore next */\n  invoke<T extends IMiddleware>(target: Type<T>, locals: Map<Function, any> = new Map<Function, any>(), designParamTypes?: any[]): T {\n    return this.injectorService.invoke<T>(target, locals, designParamTypes);\n  }\n\n  /**\n   *\n   * @param target\n   * @param args\n   * @returns {any}\n   */\n  @Deprecated(\"MiddlewareService.invokeMethod(). removed feature\")\n  /* istanbul ignore next */\n  invokeMethod<T extends IMiddleware>(target: Type<T>, ...args: any[]) {\n    const instance = this.injectorService.get<T>(target);\n\n    if (!instance || !instance.use) {\n      throw new UnknowMiddlewareError(target);\n    }\n\n    return instance.use(...args);\n  }\n}\n"],"sourceRoot":"../../../"}