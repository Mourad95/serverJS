{"version":3,"sources":["../src/swagger/decorators/returns.ts"],"names":[],"mappings":";;AAAA,qCAAuC;AACvC,yCAAiD;AA2FjD,iBAAwB,GAAG,IAAW;IACpC,MAAM,aAAa,GAAQ,EAAE,CAAC;IAE9B,IAAI,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;QAC1B,aAAa,CAAC,OAAO,KAAK,CAAC,GAAG,KAAK,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,MAAM,EAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,GAAG,EAAS,EAAE,QAAQ,EAAE,IAAI,EAAC,GAAG,aAAa,CAAC;IAElF,IAAI,IAAI,EAAE;QACR,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;KACrB;IAED,OAAO,YAAK,CAAC,QAAQ,CAAC,CAAC,KAAY,EAAE,EAAE;QACrC,MAAM,QAAQ,GAAG,4BAAmB,CAAC,OAAO,CAAC,CAAC;QAE9C,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE;gBACvB,CAAC,IAAI,CAAC,EAAE,QAAQ;aACjB,CAAC,CAAC;SACJ;aAAM;YACL,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;SACnC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAxBD,0BAwBC","file":"returns.js","sourcesContent":["import {Store, Type} from \"@tsed/core\";\nimport {mapReturnedResponse} from \"@tsed/common\";\nimport {ISwaggerResponses} from \"../interfaces/ISwaggerResponses\";\n\n/**\n * Add responses documentation for a specific status code.\n *\n * ## Examples\n * ## With status code\n *\n * ```typescript\n *  @Returns(404, {description: \"Not found\"})\n *  @Returns(200, {description: \"OK\", type: Model})\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\"\n *     },\n *     \"2OO\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"schemaOfModel\": \"...\"}\n *     }\n *   }\n * }\n * ```\n *\n * ### Without status code\n *\n * Returns can be use without status code. In this case, the response will be added to the default status code\n * (200 or the status code seated with `@Status`).\n *\n * ```typescript\n *  @Returns({description: \"Description\"})\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"200\": {\n *       \"description\": \"Description\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With type schema\n *\n * Returns accept another signature with a type.\n *\n * ```typescript\n *  @Returns(Model, {description: \"Description\"}) //OR\n *  @Returns(Model)\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"200\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"schemaOfModel\": \"...\"}\n *     }\n *   }\n * }\n * ```\n * @param statusCode Code status\n * @param options Swagger responses documentations\n * @returns {Function}\n * @decorator\n * @swagger\n */\nexport function Returns(statusCode: number, options: ISwaggerResponses): any;\nexport function Returns(options: ISwaggerResponses): any;\nexport function Returns(model: Type<any>): any;\nexport function Returns(model: Type<any>, options: ISwaggerResponses): any;\nexport function Returns(...args: any[]) {\n  const configuration: any = {};\n\n  args.forEach((value: any) => {\n    configuration[typeof value] = value;\n  });\n\n  const {number: code, object: options = {} as any, function: type} = configuration;\n\n  if (type) {\n    options.type = type;\n  }\n\n  return Store.decorate((store: Store) => {\n    const response = mapReturnedResponse(options);\n\n    if (code !== undefined) {\n      store.merge(\"responses\", {\n        [code]: response\n      });\n    } else {\n      store.merge(\"response\", response);\n    }\n  });\n}\n"],"sourceRoot":"../../"}