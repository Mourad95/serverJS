{"version":3,"sources":["../src/common/mvc/decorators/method/status.ts"],"names":[],"mappings":";;AAAA,qCAAsD;AAEtD,yEAAoE;AACpE;;GAEG;AACH,MAAM;AACN,yCAAoC;AAEpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,gBAAuB,IAAY,EAAE,UAA4B,EAAE;IACjE,OAAO,YAAK,CAAC,QAAQ,CAAC,CAAC,KAAY,EAAE,UAA+B,EAAE,EAAE;QACtE,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAE9B,MAAM,QAAQ,GAAG,yCAAmB,CAAC,OAAO,CAAC,CAAC;QAC9C,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAClC,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,EAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAC,CAAC,CAAC;QAE7C,OAAO,mBAAQ,CAAC,CAAC,OAAY,EAAE,QAAa,EAAE,IAAS,EAAE,EAAE;YACzD,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtB,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAbD,wBAaC","file":"status.js","sourcesContent":["import {DecoratorParameters, Store} from \"@tsed/core\";\nimport {IResponseOptions} from \"../../interfaces/IResponseOptions\";\nimport {mapReturnedResponse} from \"../../utils/mapReturnedResponse\";\n/**\n * @module common/mvc\n */\n/** */\nimport {UseAfter} from \"./useAfter\";\n\n/**\n * Set the HTTP status for the response. It is a chainable alias of Nodeâ€™s `response.statusCode`.\n *\n * ```typescript\n * @Status(204)\n * async myMethod() {}\n * ```\n *\n * With swagger description:\n *\n * ```typescript\n * @Status(204, {\n *   type: Model\n *   description: \"Description\"\n * })\n * @Header('Content-Type', 'application-json')\n * async myMethod() {\n * }\n * ```\n *\n * This example will produce the swagger responses object:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\",\n *       \"headers\": {\n *          \"Content-Type\": {\n *             \"type\": \"string\"\n *          }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param code\n * @param options\n * @returns {Function}\n * @decorator\n */\nexport function Status(code: number, options: IResponseOptions = {}) {\n  return Store.decorate((store: Store, parameters: DecoratorParameters) => {\n    store.set(\"statusCode\", code);\n\n    const response = mapReturnedResponse(options);\n    store.merge(\"response\", response);\n    store.merge(\"responses\", {[code]: response});\n\n    return UseAfter((request: any, response: any, next: any) => {\n      response.status(code);\n      next();\n    });\n  });\n}\n"],"sourceRoot":"../../../../"}