{"version":3,"sources":["../src/common/mvc/decorators/class/controller.ts"],"names":[],"mappings":";;AAAA,qCAAqD;AAGrD,4EAA2F;AAE3F;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,oBAA2B,IAAyC,EAAE,GAAG,YAAyB;IAChG,OAAO,CAAC,MAAW,EAAQ,EAAE;QAC3B,uCAAkB,CAAC,MAAM,CAAC,CAAC;QAE3B,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,YAAY,MAAM,IAAI,0BAAmB,CAAC,IAAI,CAAC,EAAE;YACnF,uCAAkB,CAAC,KAAK,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAsB,EAAE,YAAY,EAAC,CAAC,CAAC;SAChF;aAAM;YACL,uCAAkB,CAAC,KAAK,CAAC,MAAM,EAAE,IAAW,CAAC,CAAC;SAC/C;IACH,CAAC,CAAC;AACJ,CAAC;AAVD,gCAUC","file":"controller.js","sourcesContent":["import {isArrayOrArrayClass, Type} from \"@tsed/core\";\nimport {IControllerOptions} from \"../../interfaces/IControllerOptions\";\nimport {PathParamsType} from \"../../interfaces/PathParamsType\";\nimport {ControllerRegistry, registerController} from \"../../registries/ControllerRegistry\";\n\n/**\n * Declare a new controller with his Rest path. His methods annotated will be collected to build the routing list.\n * This routing listing will be built with the `express.Router` object.\n *\n * ```typescript\n *  @Controller(\"/calendars\")\n *  export provide CalendarCtrl {\n *\n *    @Get(\"/:id\")\n *    public get(\n *      @Request() request: Express.Request,\n *      @Response() response: Express.Response,\n *      @Next() next: Express.NextFunction\n *    ): void {\n *\n *    }\n *  }\n * ```\n *\n * @param path\n * @param dependencies\n * @returns {Function}\n * @decorator\n */\nexport function Controller(path: PathParamsType | IControllerOptions, ...dependencies: Type<any>[]): Function {\n  return (target: any): void => {\n    registerController(target);\n\n    if (typeof path === \"string\" || path instanceof RegExp || isArrayOrArrayClass(path)) {\n      ControllerRegistry.merge(target, {path: path as PathParamsType, dependencies});\n    } else {\n      ControllerRegistry.merge(target, path as any);\n    }\n  };\n}\n"],"sourceRoot":"../../../../"}