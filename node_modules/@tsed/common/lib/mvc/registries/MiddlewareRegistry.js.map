{"version":3,"sources":["../src/common/mvc/registries/MiddlewareRegistry.ts"],"names":[],"mappings":";;AAAA,qCAA4C;AAC5C,sDAAiD;AAGjD,mEAA8D;AAC9D,2EAAqE;AACrE,iEAA4D;AAE5D;;;GAGG;AACH,0CAA0C;AAC7B,QAAA,kBAAkB,GAA2B,kCAAe,CAAC,cAAc,CAAC,2BAAY,CAAC,UAAU,EAAE,mBAAQ,EAAE;IAC1H,UAAU,EAAE,IAAI;IAChB,SAAS,EAAE,IAAI;CAChB,CAAC,CAAC;AAEH,MAAM,oBAAoB,GAAG,kCAAe,CAAC,gBAAgB,CAAC,2BAAY,CAAC,UAAU,CAAC,CAAC;AAEvF;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,4BAAmC,QAA8B,EAAE,QAAc;IAC/E,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACzC,kCAAe,CAAC,WAAW,CAAC,2BAAY,CAAC,UAAU,CAAE;SAClD,GAAG,CAAC,uBAAgB,CAAC,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,CAAE;SACpD,KAAK,CAAC,GAAG,CAAC,gBAAgB,EAAE,+BAAc,CAAC,UAAU,CAAC,CAAC;AAC5D,CAAC;AALD,gDAKC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,iCAAwC,QAA8B,EAAE,QAAc;IACpF,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACzC,kCAAe,CAAC,WAAW,CAAC,2BAAY,CAAC,UAAU,CAAE;SAClD,GAAG,CAAC,uBAAgB,CAAC,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,CAAE;SACpD,KAAK,CAAC,GAAG,CAAC,gBAAgB,EAAE,+BAAc,CAAC,KAAK,CAAC,CAAC;AACvD,CAAC;AALD,0DAKC","file":"MiddlewareRegistry.js","sourcesContent":["import {getClassOrSymbol} from \"@tsed/core\";\nimport {Provider} from \"../../di/class/Provider\";\nimport {TypedProvidersRegistry} from \"../../di/interfaces\";\nimport {IProvider} from \"../../di/interfaces/IProvider\";\nimport {ProviderType} from \"../../di/interfaces/ProviderType\";\nimport {GlobalProviders} from \"../../di/registries/ProviderRegistry\";\nimport {MiddlewareType} from \"../interfaces/MiddlewareType\";\n\n/**\n *\n * @type {Registry<Provider<any>, Provider>}\n */\n// tslint:disable-next-line: variable-name\nexport const MiddlewareRegistry: TypedProvidersRegistry = GlobalProviders.createRegistry(ProviderType.MIDDLEWARE, Provider, {\n  injectable: true,\n  buildable: true\n});\n\nconst middlewareRegisterFn = GlobalProviders.createRegisterFn(ProviderType.MIDDLEWARE);\n\n/**\n * Add a new middleware in the `ProviderRegistry`. This middleware will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerMiddleware, InjectorService} from \"@tsed/common\";\n *\n * export default class FooMiddleware {\n *     constructor(){}\n *     use() {\n *         return \"test\";\n *     }\n * }\n *\n * registerMiddleware({provide: FooMiddleware});\n * // or\n * registerMiddleware(FooMiddleware);\n *\n * const injector = new InjectorService()\n * injector.load();\n *\n * const myFooService = injector.get<FooMiddleware>(FooMiddleware);\n * fooMiddleware.use(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport function registerMiddleware(provider: any | IProvider<any>, instance?: any) {\n  middlewareRegisterFn(provider, instance);\n  GlobalProviders.getRegistry(ProviderType.MIDDLEWARE)!\n    .get(getClassOrSymbol(provider.provide || provider))!\n    .store.set(\"middlewareType\", MiddlewareType.MIDDLEWARE);\n}\n\n/**\n * Add a new middleware in the `ProviderRegistry`. This middleware will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerMiddlewareError, InjectorService} from \"@tsed/common\";\n *\n * export default class FooMiddleware {\n *     constructor(){}\n *     use() {\n *         return \"test\";\n *     }\n * }\n *\n * registerMiddlewareError({provide: MyFooService});\n * // or\n * registerMiddlewareError(MyFooService);\n *\n * const injector = new InjectorService();\n * injector.load();\n *\n * const fooMiddleware = injector.get<FooMiddleware>(FooMiddleware);\n * fooMiddleware.use(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport function registerMiddlewareError(provider: any | IProvider<any>, instance?: any) {\n  middlewareRegisterFn(provider, instance);\n  GlobalProviders.getRegistry(ProviderType.MIDDLEWARE)!\n    .get(getClassOrSymbol(provider.provide || provider))!\n    .store.set(\"middlewareType\", MiddlewareType.ERROR);\n}\n"],"sourceRoot":"../../../"}