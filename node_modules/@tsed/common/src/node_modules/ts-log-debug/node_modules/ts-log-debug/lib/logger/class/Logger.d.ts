/**
 * @module logger
 */
/** */
import { LoggerAppenders } from "./LoggerAppenders";
import { ITableSettings } from "../utils/tableUtils";
import { LogLevel } from "../../core/LogLevel";
export declare class Logger {
    private _name;
    private _appenders;
    private _level;
    /**
     *
     */
    private _context;
    /**
     *
     */
    constructor(_name?: string);
    readonly appenders: LoggerAppenders;
    name: string;
    level: string;
    readonly context: Map<any, any>;
    isLevelEnabled(otherLevel: string | LogLevel): boolean;
    /**
     * Prints to stdout with newline. Multiple arguments can be passed, with the first used as the primary message and all additional used as substitution values similar to printf() (the arguments are all passed to util.format()).
     * @param data
     * @returns {any}
     */
    debug(...data: any[]): Logger;
    /**
     *
     * @param data
     * @returns {any}
     */
    info(...data: any[]): Logger;
    /**
     *
     * @param data
     * @returns {any}
     */
    warn(...data: any[]): Logger;
    /**
     * Prints to stderr with newline. Multiple arguments can be passed, with the first used as the primary
     * message and all additional used as substitution values similar to printf() (the arguments are all
     * passed to util.format()).
     * @param data
     * @param args
     * @returns {any}
     */
    error(...data: any[]): Logger;
    fatal(...data: any[]): Logger;
    /**
     *
     * @param data
     * @returns {Logger}
     */
    trace(...data: any[]): Logger;
    /**
     *
     */
    start(): Logger;
    /**
     *
     */
    stop(): Logger;
    /**
     *
     * @returns {Promise<TAll[]>}
     */
    shutdown(): Promise<any[]>;
    /**
     *
     * @returns {Logger}
     */
    private write(logLevel, data);
    /**
     * Create stack trace  the lines of least Logger.
     * @returns {string}
     */
    static createStack(): string;
    /**
     *
     * @param list
     * @param settings
     */
    drawTable(list: any[], settings?: ITableSettings): string;
    /**
     *
     * @param list
     * @param settings
     * @returns {Logger}
     */
    printTable(list: any[], settings?: ITableSettings): this;
}
