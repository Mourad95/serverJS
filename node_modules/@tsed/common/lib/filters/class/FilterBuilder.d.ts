import { InjectorService } from "@tsed/common";
import { ParamMetadata } from "./ParamMetadata";
export declare class FilterBuilder {
    private injector;
    constructor(injector: InjectorService);
    /**
     *
     */
    build(param: ParamMetadata): Function;
    /**
     *
     * @param {Type<IFilter>} target
     * @param args
     * @returns {any}
     */
    private invoke(target, ...args);
    /**
     *
     * @param {ParamMetadata} param
     * @returns {any}
     */
    private initFilter(param);
    /**
     *
     * @param filter
     * @param {ParamMetadata} param
     * @returns {(value: any) => any}
     */
    private appendRequiredFilter(filter, param);
    /**
     *
     * @param filter
     * @param param
     * @returns {(value: any) => any}
     */
    private appendConverterFilter(filter, param);
    /**
     *
     * @param filter
     * @param param
     * @returns {(value: any) => any}
     */
    private appendValidationFilter(filter, param);
    /**
     *
     * @param {Function} filter
     * @param {Function} newFilter
     * @param args
     * @returns {(value: any) => any}
     */
    private static pipe(filter, newFilter, ...args);
}
