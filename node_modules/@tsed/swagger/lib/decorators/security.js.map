{"version":3,"sources":["../src/swagger/decorators/security.ts"],"names":[],"mappings":";;AAAA,qCAA4C;AAC5C,2CAAsC;AAEtC;;;;;;;;;;;;;;;;;;;GAmBG;AACH,kBAAyB,sBAA8B,EAAE,GAAG,MAAgB;IAC1E,OAAO,CAAC,GAAG,IAAW,EAAE,EAAE;QACxB,MAAM,IAAI,GAAG,uBAAgB,CAAC,IAAI,CAAC,CAAC;QACpC,QAAQ,IAAI,EAAE;YACZ,KAAK,QAAQ;gBACX,OAAO,qBAAS,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAC,CAAC,sBAAsB,CAAC,EAAE,MAAM,EAAC,CAAC,EAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YAC9E;gBACE,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;SAC3D;IACH,CAAC,CAAC;AACJ,CAAC;AAVD,4BAUC","file":"security.js","sourcesContent":["import {getDecoratorType} from \"@tsed/core\";\nimport {Operation} from \"./operation\";\n\n/**\n * Add security metadata on the decorated method.\n *\n * ## Examples\n * ### On method\n *\n * ```typescript\n * @Controller(\"/\")\n * class ModelCtrl {\n *    @Security(\"write:calendars\")\n *    async method() {}\n * }\n * ```\n *\n * @param {string} securityDefinitionName\n * @param {string} scopes\n * @returns {(...args: any[]) => any}\n * @decorator\n * @swagger\n */\nexport function Security(securityDefinitionName: string, ...scopes: string[]) {\n  return (...args: any[]) => {\n    const type = getDecoratorType(args);\n    switch (type) {\n      case \"method\":\n        return Operation({security: [{[securityDefinitionName]: scopes}]})(...args);\n      default:\n        throw new Error(\"Security is only supported on method\");\n    }\n  };\n}\n"],"sourceRoot":"../../"}