{"version":3,"sources":["../src/common/converters/registries/ConverterRegistries.ts"],"names":[],"mappings":";;AAAA,sDAAiD;AACjD,oDAAyE;AACzE,2EAAqE;AAErE;;;GAGG;AACH,0CAA0C;AAC7B,QAAA,iBAAiB,GAA2B,kCAAe,CAAC,cAAc,CAAC,yBAAY,CAAC,SAAS,EAAE,mBAAQ,EAAE;IACxH,UAAU,EAAE,IAAI;IAChB,SAAS,EAAE,IAAI;CAChB,CAAC,CAAC;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACU,QAAA,iBAAiB,GAAG,kCAAe,CAAC,gBAAgB,CAAC,yBAAY,CAAC,OAAO,CAAC,CAAC","file":"ConverterRegistries.js","sourcesContent":["import {Provider} from \"../../di/class/Provider\";\nimport {ProviderType, TypedProvidersRegistry} from \"../../di/interfaces\";\nimport {GlobalProviders} from \"../../di/registries/ProviderRegistry\";\n\n/**\n * Converter Registry.\n * @type {Registry<Provider<any>, IProvider<any>>}\n */\n// tslint:disable-next-line: variable-name\nexport const ConverterRegistry: TypedProvidersRegistry = GlobalProviders.createRegistry(ProviderType.CONVERTER, Provider, {\n  injectable: true,\n  buildable: true\n});\n/**\n * Add a new converter in the `ProviderRegistry`. This converter will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerConverter, InjectorService} from \"@tsed/common\";\n *\n * export default class MyConverter {\n *     constructor(){}\n *     serialize() {\n *         return \"test\";\n *     }\n * }\n *\n * registerConverter({provide: MyConverter});\n * // or\n * registerConverter(MyConverter);\n *\n * const injector = new InjectorService();\n * injector.load();\n *\n * const myConverter = injector.get<MyConverter>(MyConverter);\n * myConverter.serialize(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport const registerConverter = GlobalProviders.createRegisterFn(ProviderType.SERVICE);\n"],"sourceRoot":"../../../"}