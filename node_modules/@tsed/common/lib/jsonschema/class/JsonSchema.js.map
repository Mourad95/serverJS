{"version":3,"sources":["../src/common/jsonschema/class/JsonSchema.ts"],"names":[],"mappings":"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","file":"JsonSchema.js","sourcesContent":["import {\n  deepExtends,\n  descriptorOf,\n  Enumerable,\n  isArrayOrArrayClass,\n  isDate,\n  isPrimitiveOrPrimitiveClass,\n  nameOf,\n  NotEnumerable,\n  primitiveOf\n} from \"@tsed/core\";\nimport {JSONSchema6, JSONSchema6Type, JSONSchema6TypeName} from \"json-schema\";\n\n/**\n *\n * @type {string[]}\n */\nexport const JSON_TYPES = [\"string\", \"number\", \"integer\", \"boolean\", \"object\", \"array\", \"null\", \"any\"];\n/**\n *\n * @type {string[]}\n */\nexport const AUTO_MAP_KEYS: string[] = [];\n\n/**\n * Internal use only.\n * @returns {Function}\n * @decorator\n * @private\n * @param target\n * @param propertyKey\n */\nfunction AutoMapKey(target: any, propertyKey: string): any {\n  AUTO_MAP_KEYS.push(propertyKey);\n\n  const descriptor = descriptorOf(target, propertyKey) || {configurable: true, writable: true};\n  descriptor.enumerable = true;\n\n  return descriptor;\n}\n\nexport class JsonSchema implements JSONSchema6 {\n  @NotEnumerable() private _refName: string;\n\n  @NotEnumerable() private _isCollection: boolean;\n  /**\n   *\n   * @type {string}\n   */\n  @Enumerable() $id: string;\n\n  @NotEnumerable() private _type: JSONSchema6TypeName | JSONSchema6TypeName[];\n\n  @Enumerable() id: string;\n\n  @AutoMapKey $ref: string;\n\n  @Enumerable() $schema: any;\n\n  @Enumerable() title: string;\n\n  @Enumerable() description: string;\n\n  @Enumerable() default: JSONSchema6Type;\n\n  @Enumerable() additionalItems: boolean | JSONSchema6;\n\n  @Enumerable() items: JsonSchema;\n\n  @Enumerable() maxItems: number;\n\n  @Enumerable() minItems: number;\n\n  @Enumerable() uniqueItems: boolean;\n\n  @Enumerable() maxProperties: number;\n\n  @Enumerable() minProperties: number;\n\n  @Enumerable() required: any | string[];\n\n  @Enumerable() properties: {[key: string]: JSONSchema6};\n\n  @Enumerable() additionalProperties: JsonSchema;\n\n  @Enumerable() definitions: {[p: string]: JSONSchema6};\n\n  @Enumerable() patternProperties: {[p: string]: JSONSchema6};\n\n  @Enumerable() dependencies: {[p: string]: JSONSchema6 | string[]};\n\n  @Enumerable() allOf: JSONSchema6[];\n\n  @Enumerable() anyOf: JSONSchema6[];\n\n  @Enumerable() oneOf: JSONSchema6[];\n\n  @Enumerable() not: JSONSchema6;\n\n  @Enumerable() extends: string | string[];\n\n  @AutoMapKey multipleOf: number;\n\n  @AutoMapKey maximum: number;\n\n  @AutoMapKey exclusiveMaximum: number;\n\n  @AutoMapKey minimum: number;\n\n  @AutoMapKey exclusiveMinimum: number;\n\n  @AutoMapKey maxLength: number;\n\n  @AutoMapKey minLength: number;\n\n  @AutoMapKey pattern: string;\n\n  @AutoMapKey format: string;\n\n  @AutoMapKey enum: JSONSchema6Type[];\n\n  private _proxy: any;\n\n  [key: string]: any;\n\n  constructor() {\n    this._proxy = new Proxy<JsonSchema>(this, {\n      set(schema: JsonSchema, propertyKey: any, value: any) {\n        schema.mapValue(propertyKey, value);\n\n        return true;\n      }\n    } as any);\n  }\n\n  /**\n   *\n   * @returns {JSONSchema6}\n   */\n  @NotEnumerable()\n  get mapper(): JSONSchema6 {\n    return this._proxy;\n  }\n\n  /**\n   *\n   * @returns {any | JSONSchema6TypeName | JSONSchema6TypeName[]}\n   */\n  get type(): any | JSONSchema6TypeName | JSONSchema6TypeName[] {\n    return this._type;\n  }\n\n  /**\n   *\n   * @param {any | JSONSchema6TypeName | JSONSchema6TypeName[]} value\n   */\n  @Enumerable()\n  set type(value: any | JSONSchema6TypeName | JSONSchema6TypeName[]) {\n    if (value) {\n      this._refName = nameOf(value);\n      this._type = JsonSchema.getJsonType(value);\n    } else {\n      delete this._refName;\n      delete this._type;\n    }\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get refName() {\n    return this._refName;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isCollection(): boolean {\n    return this._isCollection;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isArray(): boolean {\n    return this.type === \"array\";\n  }\n\n  /**\n   *\n   * @returns {\"collection\" | JSONSchema6TypeName | JSONSchema6TypeName[]}\n   */\n  get schemaType(): \"collection\" | JSONSchema6TypeName | JSONSchema6TypeName[] {\n    if (this.isCollection) {\n      if (!this.isArray) {\n        return \"collection\";\n      }\n    }\n\n    return this.type;\n  }\n\n  /**\n   * Write value on the right place according to the schema type\n   */\n  mapValue(key: string, value: any) {\n    switch (this.schemaType) {\n      case \"collection\":\n        this.additionalProperties[key] = value;\n        break;\n      case \"array\":\n        this.items[key] = value;\n        break;\n      default:\n        this[key] = value;\n    }\n  }\n\n  /**\n   *\n   * @param collectionType\n   */\n  toCollection(collectionType: any) {\n    this._isCollection = true;\n\n    if (isArrayOrArrayClass(collectionType)) {\n      this.items = this.items || new JsonSchema();\n      this.items.type = this._type;\n      this._type = \"array\";\n\n      this.forwardKeysTo(this, \"items\");\n    } else {\n      this.additionalProperties = new JsonSchema();\n      this.additionalProperties.type = this._type;\n      delete this._type;\n\n      this.forwardKeysTo(this, \"additionalProperties\");\n    }\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} property\n   */\n  private forwardKeysTo(instance: any, property: string) {\n    AUTO_MAP_KEYS.forEach(key => {\n      if (instance[key]) {\n        instance[property][key] = instance[key];\n        delete instance[key];\n      }\n    });\n  }\n\n  /**\n   *\n   * @returns {{}}\n   */\n  toJSON() {\n    const obj: any = {};\n\n    for (const key in this) {\n      if (!key.match(/^_/) && typeof this[key] !== \"function\") {\n        const value: any = this[key];\n\n        if (value !== undefined) {\n          if (value instanceof JsonSchema) {\n            obj[key] = value.toJSON();\n          } else {\n            obj[key] = value;\n          }\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  toObject() {\n    return JSON.parse(JSON.stringify(this.toJSON()));\n  }\n\n  /**\n   *\n   * @param obj\n   */\n  merge(obj: any): this {\n    deepExtends(this, obj);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param value\n   * @returns {JSONSchema6TypeName | JSONSchema6TypeName[]}\n   */\n  static getJsonType(value: any): JSONSchema6TypeName | JSONSchema6TypeName[] {\n    if (isPrimitiveOrPrimitiveClass(value)) {\n      if (JSON_TYPES.indexOf(value as string) > -1) {\n        return value;\n      }\n\n      return primitiveOf(value);\n    }\n\n    if (isArrayOrArrayClass(value)) {\n      if (value !== Array) {\n        return value;\n      }\n\n      return \"array\";\n    }\n\n    if (isDate(value)) {\n      return \"string\";\n    }\n\n    return \"object\";\n  }\n\n  /**\n   *\n   * @param type\n   * @returns {JSONSchema6}\n   */\n  static ref(type: any): JsonSchema {\n    const schema = new JsonSchema();\n    schema.$ref = `#/definitions/${nameOf(type)}`;\n\n    return schema;\n  }\n}\n"],"sourceRoot":"../../../"}