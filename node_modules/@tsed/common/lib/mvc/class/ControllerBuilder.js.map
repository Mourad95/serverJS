{"version":3,"sources":["../src/common/mvc/class/ControllerBuilder.ts"],"names":[],"mappings":";;AACA,mCAAmC;AAKnC,uDAAkD;AAClD,qDAAgD;AAEhD;IACE,YAAoB,QAA4B,EAAU,wBAAyC,EAAE;QAAjF,aAAQ,GAAR,QAAQ,CAAoB;QAAU,0BAAqB,GAArB,qBAAqB,CAAsB;QACnG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,qBAAqB,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;IAC/G,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAyB;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC3B,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAU,CAAC,CAAC;QAEtE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAChC,IAAI,iCAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,gCAAgC;QACvG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAS,CAAC,CAAC;QAErE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAgB,EAAE,EAAE;YAC7C,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAuB,CAAC;YAEnE,0BAA0B;YAC1B,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;aAC7E;YAED,MAAM,WAAW,GAAG,IAAI,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAEhG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,gBAAgB,CAAC,QAAyB,EAAE,WAAkB;QACpE,OAAO,WAAW;aACf,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,UAAU,CAAC;aACpC,OAAO,CAAC,CAAC,UAAe,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,+BAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7G,CAAC;CACF;AAxCD,8CAwCC","file":"ControllerBuilder.js","sourcesContent":["import {Type} from \"@tsed/core\";\nimport * as Express from \"express\";\nimport {IRouterSettings} from \"../../config/interfaces/IServerSettings\";\nimport {InjectorService} from \"../../di/services/InjectorService\";\nimport {ControllerProvider} from \"./ControllerProvider\";\n\nimport {EndpointBuilder} from \"./EndpointBuilder\";\nimport {HandlerBuilder} from \"./HandlerBuilder\";\n\nexport class ControllerBuilder {\n  constructor(private provider: ControllerProvider, private defaultRoutersOptions: IRouterSettings = {}) {\n    this.provider.router = Express.Router(Object.assign({}, defaultRoutersOptions, this.provider.routerOptions));\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  build(injector: InjectorService): this {\n    const ctrl = this.provider;\n    this.buildMiddlewares(injector, this.provider.middlewares.useBefore!);\n\n    ctrl.endpoints.forEach(endpoint => {\n      new EndpointBuilder(endpoint, this.provider.router).build(injector); // this.provider.middlewares.use\n    });\n\n    this.buildMiddlewares(injector, this.provider.middlewares.useAfter!);\n\n    ctrl.dependencies.forEach((child: Type<any>) => {\n      const provider = injector.getProvider(child) as ControllerProvider;\n\n      /* istanbul ignore next */\n      if (!provider) {\n        throw new Error(\"Controller component not found in the ControllerRegistry\");\n      }\n\n      const ctrlBuilder = new ControllerBuilder(provider, this.defaultRoutersOptions).build(injector);\n\n      this.provider.router.use(provider.path, ctrlBuilder.provider.router);\n    });\n\n    return this;\n  }\n\n  private buildMiddlewares(injector: InjectorService, middlewares: any[]) {\n    return middlewares\n      .filter(o => typeof o === \"function\")\n      .forEach((middleware: any) => this.provider.router.use(HandlerBuilder.from(middleware).build(injector)));\n  }\n}\n"],"sourceRoot":"../../../"}