{"version":3,"sources":["../src/common/mvc/decorators/method/header.ts"],"names":[],"mappings":";;AAAA,qCAAiC;AAGjC,uDAAkD;AAClD,yCAAoC;AAEpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CG;AACH,gBAAuB,UAA6C,EAAE,WAA+C;IACnH,OAAO,CAAI,MAAW,EAAE,WAA4B,EAAE,UAAsC,EAAQ,EAAE;QACpG,IAAI,WAAW,KAAK,SAAS,EAAE;YAC7B,UAAU,GAAG,EAAC,CAAC,UAAoB,CAAC,EAAE,WAAW,EAAC,CAAC;SACpD;QAED,WAAW;QACX,MAAM,KAAK,GAAG,YAAK,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;QAC1D,MAAM,OAAO,GAAqB,uBAAU,CAAC,UAA6B,CAAC,CAAC;QAE5E,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,EAAC,OAAO,EAAC,CAAC,CAAC;QAEnC,OAAO,mBAAQ,CAAC,CAAC,OAAY,EAAE,QAAa,EAAE,IAAS,EAAE,EAAE;YACzD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACjC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YACH,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IACtC,CAAC,CAAC;AACJ,CAAC;AAnBD,wBAmBC","file":"header.js","sourcesContent":["import {Store} from \"@tsed/core\";\nimport {IResponseHeader} from \"../../interfaces/IResponseHeader\";\nimport {IHeadersOptions, IResponseHeaders} from \"../../interfaces/IResponseHeaders\";\nimport {mapHeaders} from \"../../utils/mapHeaders\";\nimport {UseAfter} from \"./useAfter\";\n\n/**\n * Sets the responseâ€™s HTTP header field to value. To set multiple fields at once, pass an object as the parameter.\n *\n * ```typescript\n * @Header('Content-Type', 'text/plain');\n * private myMethod() {}\n *\n * @Status(204)\n * @Header({\n *   \"Content-Type\": \"text/plain\",\n *   \"Content-Length\": 123,\n *   \"ETag\": {\n *     \"value\": \"12345\",\n *     \"description\": \"header description\"\n *   }\n * })\n * private myMethod() {}\n * ```\n *\n * This example will produce the swagger responses object:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"204\": {\n *       \"description\": \"Description\",\n *       \"headers\": {\n *          \"Content-Type\": {\n *             \"type\": \"string\"\n *          },\n *          \"Content-Length\": {\n *             \"type\": \"number\"\n *          },\n *          \"ETag\": {\n *             \"type\": \"string\",\n *             \"description\": \"header description\"\n *          }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param headerName\n * @param headerValue\n * @returns {Function}\n * @decorator\n */\nexport function Header(headerName: string | number | IHeadersOptions, headerValue?: string | number | IResponseHeader) {\n  return <T>(target: any, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>): void => {\n    if (headerValue !== undefined) {\n      headerName = {[headerName as string]: headerValue};\n    }\n\n    // metadata\n    const store = Store.from(target, propertyKey, descriptor);\n    const headers: IResponseHeaders = mapHeaders(headerName as IHeadersOptions);\n\n    store.merge(\"response\", {headers});\n\n    return UseAfter((request: any, response: any, next: any) => {\n      Object.keys(headers).forEach(key => {\n        response.set(key, headers[key].value);\n      });\n      next();\n    })(target, propertyKey, descriptor);\n  };\n}\n"],"sourceRoot":"../../../../"}