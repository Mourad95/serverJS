{"version":3,"sources":["../src/common/mvc/decorators/method/contentType.ts"],"names":[],"mappings":";;AAAA,qCAAiC;AACjC;;GAEG;AACH,MAAM;AACN,yCAAoC;AAEpC;;;;;;;;;;;;;;;;GAgBG;AACH,qBAA4B,IAAY;IACtC,OAAO,YAAK,CAAC,QAAQ,CAAC,CAAC,KAAY,EAAE,EAAE;QACrC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAE9B,OAAO,mBAAQ,CAAC,CAAC,OAAY,EAAE,QAAa,EAAE,IAAS,EAAE,EAAE;YACzD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpB,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AATD,kCASC","file":"contentType.js","sourcesContent":["import {Store} from \"@tsed/core\";\n/**\n * @module common/mvc\n */\n/** */\nimport {UseAfter} from \"./useAfter\";\n\n/**\n * Sets the Content-Type HTTP header to the MIME type as determined by mime.lookup() for the specified type.\n * If type contains the “/” character, then it sets the `Content-Type` to type.\n *\n * ```typescript\n *  @ContentType('.html');              // => 'text/html'\n *  @ContentType('html');               // => 'text/html'\n *  @ContentType('json');               // => 'application/json'\n *  @ContentType('application/json');   // => 'application/json'\n *  @ContentType('png');                // => image/png\n *  private myMethod() {}\n * ```\n *\n * @param type\n * @returns {Function}\n * @decorator\n */\nexport function ContentType(type: string) {\n  return Store.decorate((store: Store) => {\n    store.merge(\"produces\", type);\n\n    return UseAfter((request: any, response: any, next: any) => {\n      response.type(type);\n      next();\n    });\n  });\n}\n"],"sourceRoot":"../../../../"}