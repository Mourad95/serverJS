{"version":3,"sources":["../src/swagger/services/SwaggerService.ts"],"names":[],"mappings":"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","file":"SwaggerService.js","sourcesContent":["import {ControllerProvider, ControllerService, EndpointMetadata, ExpressApplication, ServerSettingsService, Service} from \"@tsed/common\";\nimport {deepExtends, nameOf, Store} from \"@tsed/core\";\nimport * as Express from \"express\";\nimport * as Fs from \"fs\";\nimport * as PathUtils from \"path\";\nimport {Schema, Spec, Tag} from \"swagger-schema-official\";\nimport {$log} from \"ts-log-debug\";\nimport {OpenApiEndpointBuilder} from \"../class/OpenApiEndpointBuilder\";\nimport {ISwaggerPaths, ISwaggerSettings} from \"../interfaces\";\nimport {getReducers} from \"../utils\";\n\nconst swaggerUiPath = require(\"swagger-ui-dist\").absolutePath();\nconst ejs = require(\"ejs\");\n\n@Service()\nexport class SwaggerService {\n  private OPERATION_IDS: any = {};\n\n  constructor(\n    private controllerService: ControllerService,\n    private serverSettingsService: ServerSettingsService,\n    @ExpressApplication private expressApplication: Express.Application\n  ) {\n    (this as any).rand = Math.random();\n  }\n\n  /**\n   *\n   */\n  $afterRoutesInit() {\n    const swagger: ISwaggerSettings[] = [].concat(this.serverSettingsService.get(\"swagger\")).filter(o => !!o);\n\n    const urls: any[] = swagger.reduce((acc: any[], conf) => {\n      const {path = \"/\", doc, hidden} = conf;\n      if (!hidden) {\n        acc.push({url: `${path}/swagger.json`, name: doc || path});\n      }\n\n      return acc;\n    }, []);\n\n    swagger.forEach((conf: ISwaggerSettings) => {\n      const {path = \"/\", options = {}, outFile, showExplorer, cssPath, jsPath} = conf;\n      const spec = this.getOpenAPISpec(conf);\n      const scope = {\n        spec,\n        url: `${path}/swagger.json`,\n        urls,\n        showExplorer,\n        cssPath,\n        jsPath,\n        swaggerOptions: options\n      };\n\n      this.expressApplication.get(path, this.middlewareRedirect(path));\n      this.expressApplication.use(path, this.createRouter(conf, scope));\n      if (outFile) {\n        Fs.writeFileSync(outFile, JSON.stringify(spec, null, 2));\n      }\n    });\n  }\n\n  $onServerReady() {\n    const host = this.serverSettingsService.getHttpPort();\n    const swagger: ISwaggerSettings[] = [].concat(this.serverSettingsService.get(\"swagger\")).filter(o => !!o);\n    swagger.forEach((conf: ISwaggerSettings) => {\n      const {path = \"/\", doc} = conf;\n      $log.info(`[${doc || \"default\"}] Swagger JSON is available on http://${host.address}:${host.port}${path}/swagger.json`);\n      $log.info(`[${doc || \"default\"}] Swagger UI is available on http://${host.address}:${host.port}${path}/`);\n    });\n  }\n\n  /**\n   *\n   * @param {ISwaggerSettings} conf\n   * @param scope\n   */\n  private createRouter(conf: ISwaggerSettings, scope: any) {\n    const {cssPath, jsPath} = conf;\n    const router = Express.Router();\n\n    router.get(\"/\", this.middlewareIndex(scope));\n    router.get(\"/swagger.json\", (req: any, res: any) => res.status(200).json(scope.spec));\n    router.use(Express.static(swaggerUiPath));\n\n    if (cssPath) {\n      router.get(\"/main.css\", this.middlewareCss(cssPath));\n    }\n\n    if (jsPath) {\n      router.get(\"/main.js\", this.middlewareJs(jsPath));\n    }\n\n    return router;\n  }\n\n  private middlewareRedirect(path: string) {\n    /* istanbul ignore next */\n    return (req: any, res: any, next: any) => {\n      if (req.url === path && !req.url.match(/\\/$/)) {\n        res.redirect(path + \"/\");\n      } else {\n        next();\n      }\n    };\n  }\n\n  /**\n   *\n   * @param scope\n   * @returns {(req: any, res: any) => any}\n   */\n  private middlewareIndex(scope: any) {\n    /* istanbul ignore next */\n    return (req: any, res: any) =>\n      ejs.renderFile(__dirname + \"/../views/index.ejs\", scope, {}, (err: any, str: string) => {\n        if (err) {\n          $log.error(err);\n          res.status(500).send(err.message);\n        } else {\n          res.send(str);\n        }\n      });\n  }\n\n  /**\n   *\n   * @param {e.Router} router\n   * @param {string} path\n   */\n  private middlewareCss(path: string) {\n    /* istanbul ignore next */\n    return (req: any, res: any) => {\n      const content = Fs.readFileSync(PathUtils.resolve(this.serverSettingsService.resolve(path)), {encoding: \"utf8\"});\n      res.set(\"Content-Type\", \"text/css\");\n      res.status(200).send(content);\n    };\n  }\n\n  /**\n   *\n   * @param {e.Router} router\n   * @param {string} path\n   */\n  private middlewareJs(path: string) {\n    /* istanbul ignore next */\n    return (req: any, res: any) => {\n      const content = Fs.readFileSync(PathUtils.resolve(this.serverSettingsService.resolve(path)), {encoding: \"utf8\"});\n      res.set(\"Content-Type\", \"application/javascript\");\n      res.status(200).send(content);\n    };\n  }\n\n  /**\n   *\n   * @returns {Spec}\n   */\n  public getOpenAPISpec(conf: ISwaggerSettings): Spec {\n    const defaultSpec = this.getDefaultSpec(conf);\n    const paths: ISwaggerPaths = {};\n    const definitions = {};\n    const doc = conf.doc;\n    const tags: Tag[] = [];\n\n    this.OPERATION_IDS = {};\n\n    this.controllerService.routes.forEach(({provider, route}) => {\n      const hidden = provider.store.get(\"hidden\");\n      const docs = provider.store.get(\"docs\") || [];\n\n      if ((!doc && !hidden) || (doc && docs.indexOf(doc) > -1)) {\n        this.buildRoutes(paths, definitions, provider, route);\n        tags.push(this.buildTags(provider));\n      }\n    });\n\n    return deepExtends(\n      defaultSpec,\n      {\n        tags,\n        paths,\n        definitions\n      },\n      getReducers()\n    );\n  }\n\n  private readSpecPath(path: string) {\n    path = this.serverSettingsService.resolve(path);\n    if (Fs.existsSync(path)) {\n      const json = Fs.readFileSync(path, {encoding: \"utf8\"});\n      /* istanbul ignore else */\n      if (json !== \"\") {\n        return JSON.parse(json);\n      }\n    }\n\n    return {};\n  }\n\n  /**\n   * Return the global api information.\n   * @returns {Info}\n   */\n  public getDefaultSpec(conf: ISwaggerSettings): Spec {\n    const {version} = this.serverSettingsService;\n    const consumes = this.serverSettingsService.acceptMimes;\n    const produces = [\"application/json\"];\n    const {\n      spec = {\n        info: {},\n        securityDefinitions: {}\n      },\n      specPath\n    } =\n      conf || ({} as any);\n    let specPathContent = {};\n\n    if (specPath) {\n      specPathContent = this.readSpecPath(specPath);\n    }\n\n    /* istanbul ignore next */\n    const {title = \"Api documentation\", description = \"\", version: versionInfo, termsOfService = \"\", contact, license} =\n      spec.info || ({} as any);\n\n    return deepExtends(\n      {\n        swagger: \"2.0\",\n        info: {\n          version: versionInfo || version,\n          title,\n          description,\n          termsOfService,\n          contact,\n          license\n        },\n        consumes,\n        produces,\n        securityDefinitions: spec.securityDefinitions || {}\n      },\n      specPathContent,\n      getReducers()\n    );\n  }\n\n  /**\n   *\n   * @param paths\n   * @param definitions\n   * @param ctrl\n   * @param endpointUrl\n   */\n  private buildRoutes(paths: ISwaggerPaths, definitions: {[key: string]: Schema}, ctrl: ControllerProvider, endpointUrl: string) {\n    ctrl.dependencies.map(ctrl => this.controllerService.get(ctrl)).forEach((provider: ControllerProvider) => {\n      if (!provider.store.get(\"hidden\")) {\n        this.buildRoutes(paths, definitions, provider, `${endpointUrl}${provider.path}`);\n      }\n    });\n\n    ctrl.endpoints.forEach((endpoint: EndpointMetadata) => {\n      if (endpoint.store.get(\"hidden\")) {\n        return;\n      }\n\n      endpoint.pathsMethods.forEach(pathMethod => {\n        /* istanbul ignore else */\n        if (!!pathMethod.method) {\n          const builder = new OpenApiEndpointBuilder(endpoint, endpointUrl, pathMethod, this.getOperationId).build();\n\n          deepExtends(paths, builder.paths);\n          deepExtends(definitions, builder.definitions);\n        }\n      });\n    });\n  }\n\n  private buildTags(ctrl: ControllerProvider): Tag {\n    const clazz = ctrl.useClass;\n    const ctrlStore = Store.from(clazz);\n\n    return Object.assign(\n      {\n        name: ctrlStore.get(\"name\") || nameOf(clazz),\n        description: ctrlStore.get(\"description\")\n      },\n      ctrlStore.get(\"tag\") || {}\n    );\n  }\n\n  private getOperationId = (operationId: string) => {\n    if (this.OPERATION_IDS[operationId] !== undefined) {\n      this.OPERATION_IDS[operationId]++;\n      operationId = operationId + \"_\" + this.OPERATION_IDS[operationId];\n    } else {\n      this.OPERATION_IDS[operationId] = 0;\n    }\n\n    return operationId;\n  };\n}\n"],"sourceRoot":"../../"}