{"version":3,"sources":["../src/common/mvc/services/RouteService.ts"],"names":[],"mappings":"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","file":"RouteService.js","sourcesContent":["import {InjectorService} from \"../../di/services/InjectorService\";\nimport {nameOf} from \"@tsed/core\";\nimport {$log} from \"ts-log-debug\";\nimport {colorize} from \"ts-log-debug/lib/layouts/utils/colorizeUtils\";\nimport {Service} from \"../../di/decorators/service\";\nimport {ParamRegistry} from \"../../filters/registries/ParamRegistry\";\nimport {ControllerProvider} from \"../class/ControllerProvider\";\nimport {EndpointMetadata} from \"../class/EndpointMetadata\";\nimport {IControllerRoute} from \"../interfaces\";\n\n/**\n * `RouteService` is used to provide all routes collected by annotation `@ControllerProvider`.\n */\n@Service()\nexport class RouteService {\n  private readonly _routes: {route: string; provider: any}[] = [];\n\n  constructor(private injectorService: InjectorService) {}\n\n  /**\n   *\n   * @returns {{route: string; provider: any}[]}\n   */\n  get routes(): {route: string; provider: any}[] {\n    return this._routes;\n  }\n\n  $afterRoutesInit() {\n    $log.info(\"Routes mounted :\");\n    this.printRoutes($log);\n  }\n\n  /**\n   *\n   * @returns {number}\n   * @param route\n   */\n  addRoute(route: {route: string; provider: any}) {\n    return this._routes.push(route);\n  }\n\n  /**\n   * Get all routes built by TsExpressDecorators and mounted on Express application.\n   * @returns {IControllerRoute[]}\n   */\n  getRoutes(): IControllerRoute[] {\n    const routes: IControllerRoute[] = [];\n\n    this.routes.forEach((config: {route: string; provider: ControllerProvider}) => {\n      this.buildRoutes(routes, config.provider, config.route);\n    });\n\n    return routes;\n  }\n\n  /**\n   *\n   * @param routes\n   * @param ctrl\n   * @param endpointUrl\n   */\n  private buildRoutes(routes: any[], ctrl: ControllerProvider, endpointUrl: string) {\n    // console.log(\"Build routes =>\", ctrl.className, endpointUrl);\n\n    ctrl.dependencies\n      .map(ctrl => this.injectorService.getProvider(ctrl))\n      .forEach((provider: ControllerProvider) => this.buildRoutes(routes, provider, `${endpointUrl}${provider.path}`));\n\n    ctrl.endpoints.forEach((endpoint: EndpointMetadata) => {\n      endpoint.pathsMethods.forEach(({path, method}) => {\n        if (!!method) {\n          const className = nameOf(ctrl.provide),\n            methodClassName = endpoint.methodClassName,\n            parameters = ParamRegistry.getParams(ctrl.provide, endpoint.methodClassName);\n\n          routes.push({\n            method,\n            name: `${className}.${methodClassName}()`,\n            url: `${endpointUrl}${path || \"\"}`.replace(/\\/\\//gi, \"/\"),\n            className,\n            methodClassName,\n            parameters\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Print all route mounted in express via Annotation.\n   */\n  public printRoutes(logger: {info: (s: any) => void} = $log): void {\n    const mapColor: {[key: string]: string} = {\n      GET: \"green\",\n      POST: \"yellow\",\n      PUT: \"blue\",\n      DELETE: \"red\",\n      PATCH: \"magenta\",\n      ALL: \"cyan\"\n    };\n\n    const routes = this.getRoutes().map(route => {\n      const method = route.method.toUpperCase();\n\n      route.method = {\n        length: method.length,\n        toString: () => {\n          return colorize(method, mapColor[method]);\n        }\n      } as any;\n\n      return route;\n    });\n\n    const str = $log.drawTable(routes, {\n      padding: 1,\n      header: {\n        method: \"Method\",\n        url: \"Endpoint\",\n        name: \"Class method\"\n      }\n    });\n\n    logger.info(\"\\n\" + str.trim());\n  }\n\n  /**\n   * Return all Routes stored in ControllerProvider manager.\n   * @returns {IControllerRoute[]}\n   */\n  getAll(): IControllerRoute[] {\n    return this.getRoutes();\n  }\n}\n"],"sourceRoot":"../../../"}