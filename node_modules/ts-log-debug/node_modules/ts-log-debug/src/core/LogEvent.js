"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LogEvent = /** @class */ (function () {
    /**
     * Models a logging event.
     * @constructor
     * @param {String} _categoryName name of category
     * @param {LogLevel} _level level of message
     * @param {Array} _data objects to log
     * @param _context
     */
    function LogEvent(_categoryName, _level, _data, _context) {
        this._categoryName = _categoryName;
        this._level = _level;
        this._data = _data;
        this._context = _context;
        this._startTime = new Date();
    }
    Object.defineProperty(LogEvent.prototype, "startTime", {
        get: function () {
            return this._startTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "categoryName", {
        get: function () {
            return this._categoryName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "level", {
        get: function () {
            return this._level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "formatedLevel", {
        get: function () {
            return (this.level.toString() + "     ").slice(0, 5);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "data", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "context", {
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "cluster", {
        get: function () {
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "pid", {
        get: function () {
            return this.context.get("pid");
        },
        enumerable: true,
        configurable: true
    });
    return LogEvent;
}());
exports.LogEvent = LogEvent;
//# sourceMappingURL=LogEvent.js.map