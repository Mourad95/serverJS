{"version":3,"sources":["../src/common/jsonschema/decorators/propertyName.ts"],"names":[],"mappings":";;AACA,qEAAgE;AAEhE;;;;;;;;;;;;;;;;;;GAkBG;AACH,sBAA6B,IAAY;IACvC,OAAO,mCAAgB,CAAC,QAAQ,CAAC,CAAC,gBAAkC,EAAE,EAAE;QACtE,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,oCAIC","file":"propertyName.js","sourcesContent":["import {PropertyMetadata} from \"../class/PropertyMetadata\";\nimport {PropertyRegistry} from \"../registries/PropertyRegistry\";\n\n/**\n * Create an alias of the propertyKey that must be used by the converter.\n *\n * ?> This decorator is used by the Converters to deserialize correctly you model.\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @PropertyType(String)\n *    property: string[];\n * }\n * ```\n *\n * @param {string} name\n * @returns {Function}\n * @decorator\n * @converters\n */\nexport function PropertyName(name: string) {\n  return PropertyRegistry.decorate((propertyMetadata: PropertyMetadata) => {\n    propertyMetadata.name = name;\n  });\n}\n"],"sourceRoot":"../../../"}