"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var appender_1 = require("../decorators/appender");
var BaseAppender_1 = require("../class/BaseAppender");
/**
 * ## Standard Error Appender
 *
 * This appender writes all log events to the standard error stream.
 *
 * ## Configuration
 *
 * * type - stderr
 * * layout - object (optional, defaults to colouredLayout) - see layouts
 *
 * ## Example
 *
 * ```typescript
 * import {Logger} from "ts-log-debug";
 *
 * const logger = new Logger("loggerName");
 *
 * logger.appenders.set("log-error", {
 *     type: "stderr",
 *     levels: ["error", "warn", "fatal"]
 * });
 * ```
 *
 * @private
 */
var StderrAppender = /** @class */ (function (_super) {
    __extends(StderrAppender, _super);
    function StderrAppender() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.log = process.stderr.write.bind(process.stderr);
        return _this;
    }
    StderrAppender.prototype.write = function (loggingEvent) {
        this.log(this.layout(loggingEvent, this.config.timezoneOffset) + "\n");
    };
    StderrAppender = __decorate([
        appender_1.Appender({ name: "stderr" })
    ], StderrAppender);
    return StderrAppender;
}(BaseAppender_1.BaseAppender));
exports.StderrAppender = StderrAppender;
//# sourceMappingURL=StderrAppender.js.map