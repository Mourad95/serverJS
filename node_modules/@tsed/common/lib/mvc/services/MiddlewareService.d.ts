import { ProxyMap, Type } from "@tsed/core";
import { Provider } from "../../di/class/Provider";
import { InjectorService } from "../../di/services/InjectorService";
import { IMiddleware } from "../interfaces";
/**
 * @deprecated This service will be removed in a future release. Use injectorService directly.
 */
export declare class MiddlewareService extends ProxyMap<Type<any> | any, Provider<any>> {
    private injectorService;
    constructor(injectorService: InjectorService);
    /**
     *
     * @param target
     * @returns {Provider}
     * @deprecated
     */
    static get(target: Type<any>): Provider<any> | undefined;
    /**
     *
     * @param target
     * @param provider
     */
    static set(target: Type<any>, provider: Provider<any>): typeof MiddlewareService;
    /**
     *
     * @param target
     * @deprecated
     */
    static has(target: Type<any>): boolean;
    /**
     *
     * @param target
     * @param locals
     * @param designParamTypes
     * @returns {T}
     */
    invoke<T extends IMiddleware>(target: Type<T>, locals?: Map<Function, any>, designParamTypes?: any[]): T;
    /**
     *
     * @param target
     * @param args
     * @returns {any}
     */
    invokeMethod<T extends IMiddleware>(target: Type<T>, ...args: any[]): any;
}
