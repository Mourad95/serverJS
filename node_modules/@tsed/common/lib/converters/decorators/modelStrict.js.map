{"version":3,"sources":["../src/common/converters/decorators/modelStrict.ts"],"names":[],"mappings":";;AAAA,qCAAiC;AAEjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8DG;AACH,qBAA4B,KAAc;IACxC,OAAO,YAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC5B,KAAK,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,kCAIC","file":"modelStrict.js","sourcesContent":["import {Store} from \"@tsed/core\";\n\n/**\n * Change the default behavior when the converters deserialize/serialize your model.\n *\n * ### validationModelStrict options\n *\n * When `validationModelStrict` is `true`, the converters will check the model consistency. For example, when a property is unknown\n * on the object sent in the request, Converters will throw a `BadRequest` because the property doesn't exists on the defined Model.\n *\n * Example:\n *\n * ```typescript\n * import {InjectorService, ConvertersService, Required, Property} from \"@tsed/common\";\n *\n * const injector = new InjectorService()\n * injector.load();\n *\n * class TaskModel {\n *    @Required()\n *    subject: string;\n *\n *    @Property()\n *    rate: number;\n * }\n *\n * const convertersService = injector.get(ConvertersService);\n * convertersService.validationModelStrict = true;\n *\n * convertersService.deserialize({unknowProperty: \"test\"}, TaskModel); // BadRequest\n * ```\n *\n * It's possible to disable this behavior for a specific Model with the `@ModelStrict` decorator.\n *\n * Example:\n *\n * ```typescript\n * import {InjectorService, ConvertersService, ModelStrict, Required, Property} from \"@tsed/common\";\n *\n * const injector = new InjectorService()\n * injector.load();\n *\n * @ModelStrict(false)\n * class TaskModel {\n *    @Required()\n *    subject: string;\n *\n *    @Property()\n *    rate: number;\n *\n *    [key: string]: any; // recommended\n * }\n *\n * const convertersService = injector.get(ConvertersService);\n * convertersService.validationModelStrict = true;\n *\n * const result = convertersService.deserialize({unknowProperty: \"test\"}, TaskModel);\n * console.log(result) // TaskModel {unknowProperty: \"test\"}\n * ```\n *\n * > If the validationModelStrict is false, you can use `@ModelStrict` decorator to enable the strict validation for a specific model.\n *\n * @decorator\n * @conveters\n */\nexport function ModelStrict(value: boolean) {\n  return Store.decorate(store => {\n    store.set(\"modelStrict\", value);\n  });\n}\n"],"sourceRoot":"../../../"}